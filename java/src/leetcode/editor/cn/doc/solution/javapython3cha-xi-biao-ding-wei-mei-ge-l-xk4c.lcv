# 题目

## 128. 最长连续序列

给定一个未排序的整数数组 `nums` ，找出数字连续的最长序列（不要求序列元素在原数组中连续）的长度。

请你设计并实现时间复杂度为 `O(n)` 的算法解决此问题。

# 题目分析

对于数组中存在的连续序列，为了统计每个连续序列的长度，我们希望直接**定位到每个连续序列的起点**，从起点开始遍历每个连续序列，从而获得长度。

![image.png](https://pic.leetcode.cn/1690546192-KkNhtz-image.png)

那么如何获取到每个连续序列的起点呢，或者说**什么样的数才是一个连续序列的起点？**
答案是这个数的前一个数不存在于数组中，因为我们需要能够快速判断当前数`num`的前一个数`num - 1`是否存在于数组中。

同时当我们定位到起点后，我们就要遍历这个连续序列，**什么时候是终点呢？**
答案是当前数`num`的后一个数`nunm + 1`不存在于数组中，因此我们需要能够快速判断当前数`num`的后一个数`num + 1`是否存在于数组中。

为了实现上述需求，我们使用**哈希表**来记录数组中的所有数，以实现对数值的快速查找。

# 代码

* []

```java
class Solution {
    public int longestConsecutive(int[] nums) {
        int res = 0;    // 记录最长连续序列的长度
        Set<Integer> numSet = new HashSet<>();  // 记录所有的数值
        for(int num: nums){
            numSet.add(num);    // 将数组中的值加入哈希表中
        }
        int seqLen;     // 连续序列的长度
        for(int num: numSet){
            // 如果当前的数是一个连续序列的起点，统计这个连续序列的长度
            if(!numSet.contains(num - 1)){
                seqLen = 1;
                while(numSet.contains(++num))seqLen++;  // 不断查找连续序列，直到num的下一个数不存在于数组中
                res = Math.max(res, seqLen);    // 更新最长连续序列长度
            }
        }
        return res;
    }
}
```

* []

```python
class Solution:
    def longestConsecutive(self, nums: List[int]) -> int:
        res = 0     # 记录最长连续序列的长度
        num_set = set(nums)     # 记录nums中的所有数值
        for num in num_set:
            # 如果当前的数是一个连续序列的起点，统计这个连续序列的长度
            if (num - 1) not in num_set:
                seq_len = 1     # 连续序列的长度，初始为1
                while (num + 1) in num_set:
                    seq_len += 1
                    num += 1    # 不断查找连续序列，直到num的下一个数不存在于数组中
                res = max(res, seq_len)     # 更新最长连续序列长度
        return res
```

* []

```c++
class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        int res = 0;    // 记录最长连续序列的长度
        unordered_set<int> num_set(nums.begin(), nums.end());   // 记录nums中的所有数值
        int seqLen;
        for(int num: num_set){
            // 如果当前的数是一个连续序列的起点，统计这个连续序列的长度
            if(!num_set.count(num - 1)){
                seqLen = 1;     // 连续序列的长度，初始为1
                while(num_set.count(++num))seqLen++;    // 不断查找连续序列，直到num的下一个数不存在于数组中
                res = max(res, seqLen);     // 更新最长连续序列长度
            }
        }
        return res;
    }
};
```

