> 此专栏文章是对力扣上算法题目**各种方法**的**总结和归纳**, 整理出最重要的思路和知识重点并以**思维导图**形式呈现, 当然也会加上我对**导图的详解**.
>
> **目的是**为了更方便快捷的**记忆和回忆算法重点**\(不用每次都重复看题解\), 毕竟算法不是做了一遍就能完全记住的. 所以本文适合已经知道解题思路和方法, 想进一步**加强理解和记忆**的朋友, 并不适合第一次接触此题的朋友\(可以根据题号先去力扣看看官方题解, 然后再看本文内容\).
>
> 关于[本专栏**所有题目**的目录链接](https://leetcode-cn.com/problems/two-sum/solution/suo-you-ti-jie-de-mu-lu-lian-jie-si-wei-ecnoo/), 刷算法题目的顺序/注意点/技巧, 以及**思维导图源文件**问题请点击上方 [我的主页](https://leetcode-cn.com/u/gu-xx-qi/).
>
> 想进大厂, 刷算法是必不可少的, 欢迎和博主一起打卡刷力扣算法, 博主同步更新了算法视频讲解 和 其他文章/导图讲解, 更易于理解, 欢迎来看!
>
> **关注博主获得题解更新的最新消息!!!**

文章对应的 [视频题解](https://leetcode-cn.com/problems/search-insert-position/solution/si-wei-dao-tu-zheng-li-zong-jie-liao-er-t7i25/)

## 0.导图整理

![image.png](https://pic.leetcode-cn.com/1628933645-lfjMLm-image.png)

## 1.先确定查找区间的左右开闭情况

这是写二分查找最根本的问题, 因为根据不同的情况, 下面的操作是完全不同的, 这也是很多朋友感觉二分查找难写的地方, 这里为了方便, 我直接将区间定义为**左闭右开**`[left, right)`的形式, 这里根据自己的习惯最好将区间完全固定住, 以后都按照一种模式来写, 如果你习惯左闭右闭也同样固定住, 这样不用每次都纠结.

固定为**左闭右开的好处**是: 很多函数中对区间的操作都是左闭右开的形式, 这算是语言的特点吧, 比如字符串中截取子串长度, 列表的截取都是左闭右开的形式, 这样就可以和**语言特点相对应**.

另一个好处就是在**返回值的问题**上, 下文会提到.

## 2.数组长度

当区间固定住为**左闭右开**, 数组长度就固定为`[0, len(nums))`, 这也是**左右端点的初值**, 如为左闭右闭, 那长度就是`[0, len(nums)-1]`了.

## 3.循环退出条件

这里也要特别注意, 代码为 `while left < right` 因为区间是**右开**, 所以不能有=, 否则区间就不存在了, 这样写循环控制的另外一个好处就是在**退出循环**时, 必然满足 `left == right`, 这样在最后的返回值就可以**任意返回**了, 因为它们完全相等, 而不用去纠结该返回哪个端点了.

## 4.中间值的写法

写法为 `mid = left + (right - left)//2` , `//2`在Python中表示**整除**, `/2`在Python中表示**正常除**, 是有余数的, 这点和其他语言有所不同. 这样写的好处也非常简单, 就是为了**防止大数溢出**, 因为写成`(left + right)//2`时, 当数比较大时, `left + right`是有溢出的风险的, 这种写法就可以避免了.

## 5.中间值和目标值的比较关系

`if nums[mid] < target`  这个比较关系涉及到上图中4和5的两种变形, 写成什么样的形式是不固定的, 这里是根据题目要求来写的.

简单来说就是如果是`<`, 那么当`nums[mid]`达到是**比target小的数中的最大的数**的时候, 通过if条件进入, **left的值**为`mid+1`后的值必然是大于等于target的值, 这时候**可能取到和target相等的位置**.

但是当换成`≤`时, 当`nums[mid] == target`时, 仍然会进入if条件, **left的值**为`mid+1`后的值必然是**大于target的值**, 这时候就不可能取到和target相等的位置. 就会**收敛到第一个大于target的位置**.

这点还是有点复杂的, 可以好好多看几遍.

第5条是说数组**由递增改为递减**, 其实只要将**判断条件反过来**就可以了, 还是很好理解的.

## 6.左右区间的变化

区间的变化**完全取决于区间的定义**, 因为**左闭**, 所以左区间为`left = mid+1`, 因为**右开**, 所以右区间变换为`right = mid`, 其实真实取的值也就是mid-1

## 7.最终返回值

最后的返回值上文已经说过了, **随便返回哪个都可以**

这个模板算是比较好记忆, 也比较简洁的模板了, 如果你也比较习惯左闭右开的区间, 直接理解记住此模板就可以了, 如果你习惯左闭右闭的区间, 那稍微更改下也就可以了.

* []

```python
class Solution:
    def searchInsert(self, nums: List[int], target: int) -> int:
        left, right = 0, len(nums) #采用左闭右开区间[left,right)
        while left < right: # 右开所以不能有=,区间不存在
            mid = left + (right - left)//2 # 防止溢出, //表示整除
            if nums[mid] < target: # 中点小于目标值,在右侧,可以得到相等位置
                left = mid + 1 # 左闭,所以要+1
            else:
                right = mid # 右开,真正右端点为mid-1
        return left # 此算法结束时保证left = right,返回谁都一样
```

![](https://pic.leetcode-cn.com/1630829429-vjIBwS-1a3872e5-79d8-49fc-940b-0258d48b8f61.gif)
