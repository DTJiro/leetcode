以示例 1 为例，我们有 $[1,3],[2,6],[8,10],[15,18]$ 这四个区间。

为方便合并，把区间按照左端点从小到大排序（示例 1 已经按照左端点排序了）。排序的理由会在下面的合并过程中说明。

排序后，我们就知道了第一个合并区间的左端点，即 $\textit{intervals}[0][0]=1$。

第一个合并区间的右端点是多少？目前只知道其 $\ge \textit{intervals}[0][1]=3$，但具体是多少现在还不确定，得向右遍历。

具体算法如下：

1. 把 $\textit{intervals}[0]$ 加入答案。注意，答案的最后一个区间表示**当前正在合并的区间**。
2. 遍历到 $\textit{intervals}[1] = [2,6]$，由于左端点 $2$ 不超过当前合并区间的右端点 $3$，可以合并。由于右端点 $6>3$，那么**更新当前合并区间的右端点**为 $6$。注意，由于我们已经按照左端点排序，所以 $\textit{intervals}[1]$ 的左端点 $2$ 必然大于等于合并区间的左端点，所以**无需更新当前合并区间的左端点**。
3. 遍历到 $\textit{intervals}[2] = [8,10]$，由于左端点 $8$ 大于当前合并区间的右端点 $6$，无法合并（两个区间不相交）。再次利用区间按照左端点排序的性质，更后面的区间的左端点也大于 $6$，无法与当前合并区间相交，所以当前合并区间 $[1,6]$ 就固定下来了，把新的合并区间 $[8,10]$ 加入答案。
4. 遍历到 $\textit{intervals}[3] = [15,18]$，由于左端点 $15$ 大于当前合并区间的右端点 $10$，无法合并（两个区间不相交），我们找到了一个新的合并区间 $[15,18]$ 加入答案。

上述算法同时说明，按照左端点排序后，合并的区间一定是 $\textit{intervals}$ 中的连续子数组。

[本题视频讲解](https://www.bilibili.com/video/BV1Qx4y1E7zj?t=2m56s)，欢迎关注。

* [sol-Python3]

```py
class Solution:
    def merge(self, intervals: List[List[int]]) -> List[List[int]]:
        intervals.sort(key=lambda p: p[0])  # 按照左端点从小到大排序
        ans = []
        for p in intervals:
            if ans and p[0] <= ans[-1][1]:  # 可以合并
                ans[-1][1] = max(ans[-1][1], p[1])  # 更新右端点最大值
            else:  # 不相交，无法合并
                ans.append(p)  # 新的合并区间
        return ans
```

* [sol-Java]

```java
public class Solution {
    public int[][] merge(int[][] intervals) {
        Arrays.sort(intervals, (p, q) -> p[0] - q[0]); // 按照左端点从小到大排序
        List<int[]> ans = new ArrayList<>();
        for (int[] p : intervals) {
            int m = ans.size();
            if (m > 0 && p[0] <= ans.get(m - 1)[1]) { // 可以合并
                ans.get(m - 1)[1] = Math.max(ans.get(m - 1)[1], p[1]); // 更新右端点最大值
            } else { // 不相交，无法合并
                ans.add(p); // 新的合并区间
            }
        }
        return ans.toArray(new int[ans.size()][]);
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        ranges::sort(intervals); // 按照左端点从小到大排序
        vector<vector<int>> ans;
        for (auto& p : intervals) {
            if (!ans.empty() && p[0] <= ans.back()[1]) { // 可以合并
                ans.back()[1] = max(ans.back()[1], p[1]); // 更新右端点最大值
            } else { // 不相交，无法合并
                ans.emplace_back(p); // 新的合并区间
            }
        }
        return ans;
    }
};
```

* [sol-Go]

```go
func merge(intervals [][]int) (ans [][]int) {
    slices.SortFunc(intervals, func(p, q []int) int { return p[0] - q[0] }) // 按照左端点从小到大排序
    for _, p := range intervals {
        m := len(ans)
        if m > 0 && p[0] <= ans[m-1][1] { // 可以合并
            ans[m-1][1] = max(ans[m-1][1], p[1]) // 更新右端点最大值
        } else { // 不相交，无法合并
            ans = append(ans, p) // 新的合并区间
        }
    }
    return
}
```

* [sol-JavaScript]

```js
var merge = function(intervals) {
    intervals.sort((p, q) => p[0] - q[0]); // 按照左端点从小到大排序
    const ans = [];
    for (const p of intervals) {
        const m = ans.length;
        if (m && p[0] <= ans[m - 1][1]) { // 可以合并
            ans[m - 1][1] = Math.max(ans[m - 1][1], p[1]); // 更新右端点最大值
        } else { // 不相交，无法合并
            ans.push(p); // 新的合并区间
        }
    }
    return ans;
};
```

* [sol-Rust]

```rust
impl Solution {
    pub fn merge(mut intervals: Vec<Vec<i32>>) -> Vec<Vec<i32>> {
        intervals.sort_unstable_by(|a, b| a[0].cmp(&b[0])); // 按照左端点从小到大排序
        let mut ans: Vec<Vec<i32>> = vec![];
        for p in intervals {
            if let Some(last) = ans.last_mut() {
                if p[0] <= last[1] { // 可以合并
                    last[1] = last[1].max(p[1]); // 更新右端点最大值
                } else { // 不相交，无法合并
                    ans.push(p); // 新的合并区间
                }
            } else {
                ans.push(p); // 第一个区间
            }
        }
        ans
    }
}
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(n\log n)$，其中 $n$ 是 $\textit{intervals}$ 的长度。瓶颈在排序上。
- 空间复杂度：$\mathcal{O}(1)$。排序的栈开销和返回值不计入。

## 分类题单

以下题单没有特定的顺序，可以按照个人喜好刷题。

1. [滑动窗口（定长/不定长/多指针）](https://leetcode.cn/circle/discuss/0viNMK/)
2. [二分算法（二分答案/最小化最大值/最大化最小值/第K小）](https://leetcode.cn/circle/discuss/SqopEo/)
3. [单调栈（基础/矩形面积/贡献法/最小字典序）](https://leetcode.cn/circle/discuss/9oZFK9/)
4. [网格图（DFS/BFS/综合应用）](https://leetcode.cn/circle/discuss/YiXPXW/)
5. [位运算（基础/性质/拆位/试填/恒等式/贪心/脑筋急转弯）](https://leetcode.cn/circle/discuss/dHn9Vk/)
6. [图论算法（DFS/BFS/拓扑排序/最短路/最小生成树/二分图/基环树/欧拉路径）](https://leetcode.cn/circle/discuss/01LUak/)
7. [动态规划（入门/背包/状态机/划分/区间/状压/数位/数据结构优化/树形/博弈/概率期望）](https://leetcode.cn/circle/discuss/tXLS3i/)
8. [常用数据结构（前缀和/差分/栈/队列/堆/字典树/并查集/树状数组/线段树）](https://leetcode.cn/circle/discuss/mOr1u6/)
9. [数学算法（数论/组合/概率期望/博弈/计算几何/随机算法）](https://leetcode.cn/circle/discuss/IYT3ss/)

[我的题解精选（已分类）](https://github.com/EndlessCheng/codeforces-go/blob/master/leetcode/SOLUTIONS.md)
