晕递归的同学，请看视频：[深入理解递归【基础算法精讲 09】](https://www.bilibili.com/video/BV1UD4y1Y769/)

分类讨论：

- 如果 $\textit{root}_1$ 是空的，无需合并，直接返回 $\textit{root}_2$。
- 如果 $\textit{root}_2$ 是空的，无需合并，直接返回 $\textit{root}_1$。
- 如果都不为空，那么将这两个节点的值相加，作为合并后节点的新值。然后递归合并 $\textit{root}_1.\textit{left}$ 与 $\textit{root}_2.\textit{left}$，得到合并后的左子树；递归合并 $\textit{root}_1.\textit{right}$ 与 $\textit{root}_2.\textit{right}$，得到合并后的右子树。最后返回合并后的节点。

* [sol-Python3]

```py
class Solution:
    def mergeTrees(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -> Optional[TreeNode]:
        if root1 is None: return root2
        if root2 is None: return root1
        return TreeNode(root1.val + root2.val,
            self.mergeTrees(root1.left, root2.left),    # 合并左子树
            self.mergeTrees(root1.right, root2.right))  # 合并右子树
```

* [sol-Java]

```java
class Solution {
    public TreeNode mergeTrees(TreeNode root1, TreeNode root2) {
        if (root1 == null) return root2;
        if (root2 == null) return root1;
        return new TreeNode(root1.val + root2.val,
            mergeTrees(root1.left, root2.left),    // 合并左子树
            mergeTrees(root1.right, root2.right)); // 合并右子树
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    TreeNode *mergeTrees(TreeNode *root1, TreeNode *root2) {
        if (root1 == nullptr) return root2;
        if (root2 == nullptr) return root1;
        return new TreeNode(root1->val + root2->val,
            mergeTrees(root1->left, root2->left),    // 合并左子树
            mergeTrees(root1->right, root2->right)); // 合并右子树
    }
};
```

* [sol-Go]

```go
func mergeTrees(root1, root2 *TreeNode) *TreeNode {
    if root1 == nil {
        return root2
    }
    if root2 == nil {
        return root1
    }
    return &TreeNode{root1.Val + root2.Val,
        mergeTrees(root1.Left, root2.Left),   // 合并左子树
        mergeTrees(root1.Right, root2.Right)} // 合并右子树
}
```

* [sol-JavaScript]

```js
var mergeTrees = function (root1, root2) {
    if (root1 === null) return root2;
    if (root2 === null) return root1;
    return new TreeNode(root1.val + root2.val,
        mergeTrees(root1.left, root2.left),    // 合并左子树
        mergeTrees(root1.right, root2.right)); // 合并右子树
};
```

* [sol-Rust]

```rust
use std::rc::Rc;
use std::cell::RefCell;

impl Solution {
    pub fn merge_trees(root1: Option<Rc<RefCell<TreeNode>>>, root2: Option<Rc<RefCell<TreeNode>>>) -> Option<Rc<RefCell<TreeNode>>> {
        match (root1, root2) {
            (None, None) => None,
            (Some(node), None) | (None, Some(node)) => Some(node),
            (Some(node1), Some(node2)) => {
                let val = node1.borrow().val + node2.borrow().val;
                let left = Self::merge_trees(node1.borrow_mut().left.take(), node2.borrow_mut().left.take()); // 合并左子树
                let right = Self::merge_trees(node1.borrow_mut().right.take(), node2.borrow_mut().right.take()); // 合并右子树
                Some(Rc::new(RefCell::new(TreeNode { val, left, right })))
            }
        }
    }
}
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(\min(n,m))$，其中 $n,m$ 分别为两棵二叉树的节点数。
- 空间复杂度：$\mathcal{O}(\min(n,m))$。

## 练习

- [100. 相同的树](https://leetcode.cn/problems/same-tree/)，[视频讲解](https://www.bilibili.com/video/BV18M411z7bb/)
- [101. 对称二叉树](https://leetcode.cn/problems/symmetric-tree/)
- [104. 二叉树的最大深度](https://leetcode.cn/problems/maximum-depth-of-binary-tree/)
- [111. 二叉树的最小深度](https://leetcode.cn/problems/minimum-depth-of-binary-tree/)
- [110. 平衡二叉树](https://leetcode.cn/problems/balanced-binary-tree/)
- [199. 二叉树的右视图](https://leetcode.cn/problems/binary-tree-right-side-view/)

## 分类题单

1. [滑动窗口（定长/不定长/多指针）](https://leetcode.cn/circle/discuss/0viNMK/)
2. [二分算法（二分答案/最小化最大值/最大化最小值/第K小）](https://leetcode.cn/circle/discuss/SqopEo/)
3. [单调栈（矩形系列/字典序最小/贡献法）](https://leetcode.cn/circle/discuss/9oZFK9/)
4. [网格图（DFS/BFS/综合应用）](https://leetcode.cn/circle/discuss/YiXPXW/)
5. [位运算（基础/性质/拆位/试填/恒等式/贪心/脑筋急转弯）](https://leetcode.cn/circle/discuss/dHn9Vk/)
6. [图论算法（DFS/BFS/拓扑排序/最短路/最小生成树/二分图/基环树/欧拉路径）](https://leetcode.cn/circle/discuss/01LUak/)
7. [动态规划（入门/背包/状态机/划分/区间/状压/数位/数据结构优化/树形/博弈/概率期望）](https://leetcode.cn/circle/discuss/tXLS3i/)

更多题单，点我个人主页 - 讨论发布。

欢迎关注 [B站@灵茶山艾府](https://space.bilibili.com/206214)

[往期题解精选（已分类）](https://github.com/EndlessCheng/codeforces-go/blob/master/leetcode/SOLUTIONS.md)
