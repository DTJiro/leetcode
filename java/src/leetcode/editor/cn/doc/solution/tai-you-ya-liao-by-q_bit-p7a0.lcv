### 解题思路

不多废话，直接上核心：
**n & n-1**  的值是 **去掉二进制n最右边1的值**；
比如 1010 & 1001 = 1000；用这个可以非常优雅的计算一个数里面的1的个数！

这个题目虽然简单，收获这个位运算的小技巧还是不错的。
就是求两个数的二进制形式上，不同的二进制位数，也就是**汉明距离**
比如 1000 和 1101  只有两位不同，汉明距离就是2

解题方法就是：两数异或（不同位为1），剩下二进制为1的就是不同的二进制位，统计1个数即汉明距离；
这个时候就用上这个求二进制1的个数的位运算小技巧了！见代码，详细注释

### 代码

* cpp

```cpp
class Solution {
public:
    int hammingDistance(int x, int y) {
        int ret = x^y;      //异或剩下1的个数就是二进制位不同的位置的数目
        int ans = 0;        //answer 记录1的个数
        while(ret){         //每一次运算消去一个1，直到为0终止循环
            ret&=(ret-1);   // ret= ret & (ret-1); 
            ans++;
        }
        return ans;
    }
};
```

