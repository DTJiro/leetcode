**前置题目**：请先完成 [560. 和为 K 的子数组](https://leetcode.cn/problems/subarray-sum-equals-k/)（本题在数组上的情况），做法见 [我的题解](https://leetcode.cn/problems/subarray-sum-equals-k/solution/qian-zhui-he-ha-xi-biao-cong-liang-ci-bi-4mwr/)。

本题做法和 560 题是一样的，前缀和+哈希表。

在二叉树上，前缀和相当于从根节点开始的路径元素和。用哈希表 $\textit{cnt}$ 统计前缀和的出现次数，当我们递归到节点 $\textit{node}$ 时，设从根到 $\textit{node}$ 的路径元素和为 $s$，那么就找到了 $\textit{cnt}[s-\textit{targetSum}]$ 个符合要求的路径，加入答案。

### 答疑

**问**：为什么要把 $0$ 加到哈希表中？

**答**：这里的 $0$ 相当于前缀和数组中的 $s[0]=0$。举个最简单的例子，根节点值为 $1$，$\textit{targetSum}=1$。如果不把 $0$ 加到哈希表中，按照我们的算法，没法算出这里有 $1$ 条符合要求的路径。也可以这样理解，要想**把任意路径和都表示成两个前缀和的差**，必须添加一个 $0$，否则当路径是前缀时（从根节点开始的路径），没法减去一个数，具体见 [前缀和及其扩展](https://leetcode.cn/problems/range-sum-query-immutable/solution/qian-zhui-he-ji-qi-kuo-zhan-fu-ti-dan-py-vaar/) 中的讲解。

**问**：为什么代码中要先更新 $\textit{ans}$，再更新 $\textit{cnt}$？

**答**：在 $\textit{targetSum}\ne 0$ 的情况下，这俩谁先谁后都可以。但如果 $\textit{targetSum}=0$，假设根节点值为 $1$，如果先把 $\textit{cnt}[1]$ 增加 $1$，再把 $\textit{ans}$ 增加 $\textit{cnt}[s-\textit{targetSum}] = \textit{cnt}[1] = 1$，就相当于我们找到了一条和为 $\textit{targetSum}=0$ 的路径，但和为 $0$ 的路径是不存在的。另一种理解方式是，空路径的元素和等于 $0$，我们把这个 $0$ 当作了符合要求的路径，但题目要统计的是非空路径。

**问**：代码中的「恢复现场」用意何在？

**答**：如果不恢复现场，当我们递归完左子树，要递归右子树时，$\textit{cnt}$ 中还保存着左子树的数据。但递归到右子树，要计算的路径并不涉及到左子树的任何节点，如果不恢复现场，$\textit{cnt}$ 中统计的前缀和个数会更多，我们算出来的答案可能比正确答案更大。

* [sol-Python3]

```py
class Solution:
    def pathSum(self, root: Optional[TreeNode], targetSum: int) -> int:
        ans = 0
        cnt = defaultdict(int)
        cnt[0] = 1

        def dfs(node: Optional[TreeNode], s: int) -> None:
            if node is None:
                return
            nonlocal ans
            s += node.val
            ans += cnt[s - targetSum]
            cnt[s] += 1
            dfs(node.left, s)
            dfs(node.right, s)
            cnt[s] -= 1  # 恢复现场

        dfs(root, 0)
        return ans
```

* [sol-Java]

```java
class Solution {
    private int ans;

    public int pathSum(TreeNode root, int targetSum) {
        Map<Long, Integer> cnt = new HashMap<>();
        cnt.put(0L, 1);
        dfs(root, 0, targetSum, cnt);
        return ans;
    }

    private void dfs(TreeNode node, long s, int targetSum, Map<Long, Integer> cnt) {
        if (node == null) {
            return;
        }
        s += node.val;
        ans += cnt.getOrDefault(s - targetSum, 0);
        cnt.merge(s, 1, Integer::sum);
        dfs(node.left, s, targetSum, cnt);
        dfs(node.right, s, targetSum, cnt);
        cnt.merge(s, -1, Integer::sum); // 恢复现场
    }
}
```

* [sol-Java写法二]

```java
class Solution {
    public int pathSum(TreeNode root, int targetSum) {
        Map<Long, Integer> cnt = new HashMap<>();
        cnt.put(0L, 1);
        return dfs(root, 0, targetSum, cnt);
    }

    private int dfs(TreeNode node, long s, int targetSum, Map<Long, Integer> cnt) {
        if (node == null) {
            return 0;
        }
        s += node.val;
        int ans = cnt.getOrDefault(s - targetSum, 0);
        cnt.merge(s, 1, Integer::sum);
        ans += dfs(node.left, s, targetSum, cnt);
        ans += dfs(node.right, s, targetSum, cnt);
        cnt.merge(s, -1, Integer::sum); // 恢复现场
        return ans;
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    int pathSum(TreeNode* root, int targetSum) {
        int ans = 0;
        unordered_map<long long, int> cnt{{0, 1}};
        auto dfs = [&](auto&& dfs, TreeNode* node, long long s) {
            if (node == nullptr) {
                return;
            }
            s += node->val;
            // 注意不要直接 += cnt[s-targetSum]，如果 s-targetSum 不在 cnt 中，这会插入 s-targetSum
            ans += cnt.contains(s-targetSum) ? cnt[s - targetSum] : 0;
            cnt[s]++;
            dfs(dfs, node->left, s);
            dfs(dfs, node->right, s);
            cnt[s]--; // 恢复现场
        };
        dfs(dfs, root, 0);
        return ans;
    }
};
```

* [sol-Go]

```go
func pathSum(root *TreeNode, targetSum int) (ans int) {
    cnt := map[int]int{0: 1}
    var dfs func(*TreeNode, int)
    dfs = func(node *TreeNode, s int) {
        if node == nil {
            return
        }
        s += node.Val
        ans += cnt[s-targetSum]
        cnt[s]++
        dfs(node.Left, s)
        dfs(node.Right, s)
        cnt[s]-- // 恢复现场
    }
    dfs(root, 0)
    return ans
}
```

* [sol-JavaScript]

```js
const pathSum = function(root, targetSum) {
    let ans = 0;
    const cnt = {0: 1}; // 把 s[0] = 0 统计进来
    function dfs(node, s) {
        if (node === null) {
            return;
        }
        s += node.val;
        ans += cnt[s - targetSum] ?? 0;
        cnt[s] = (cnt[s] ?? 0) + 1;
        dfs(node.left, s);
        dfs(node.right, s);
        cnt[s]--; // 恢复现场
    }
    dfs(root, 0);
    return ans;
};
```

* [sol-Rust]

```rust
use std::rc::Rc;
use std::cell::RefCell;
use std::collections::HashMap;

impl Solution {
    pub fn path_sum(root: Option<Rc<RefCell<TreeNode>>>, target_sum: i32) -> i32 {
        fn dfs(node: &Option<Rc<RefCell<TreeNode>>>, s: i64, target_sum: i64, ans: &mut i32, cnt: &mut HashMap<i64, i32>) {
            if let Some(node) = node {
                let node = node.borrow();
                let s = s + node.val as i64;
                *ans += *cnt.get(&(s - target_sum)).unwrap_or(&0);
                *cnt.entry(s).or_insert(0) += 1;
                dfs(&node.left, s, target_sum, ans, cnt);
                dfs(&node.right, s, target_sum, ans, cnt);
                *cnt.entry(s).or_insert(0) -= 1; // 恢复现场
            }
        }
        let mut ans = 0;
        let mut cnt = HashMap::new();
        cnt.insert(0, 1);
        dfs(&root, 0, target_sum as i64, &mut ans, &mut cnt);
        ans
    }
}
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(n)$，其中 $n$ 是二叉树的节点个数。
- 空间复杂度：$\mathcal{O}(n)$。

## 分类题单

[如何科学刷题？](https://leetcode.cn/circle/discuss/RvFUtj/)

1. [滑动窗口（定长/不定长/多指针）](https://leetcode.cn/circle/discuss/0viNMK/)
2. [二分算法（二分答案/最小化最大值/最大化最小值/第K小）](https://leetcode.cn/circle/discuss/SqopEo/)
3. [单调栈（基础/矩形面积/贡献法/最小字典序）](https://leetcode.cn/circle/discuss/9oZFK9/)
4. [网格图（DFS/BFS/综合应用）](https://leetcode.cn/circle/discuss/YiXPXW/)
5. [位运算（基础/性质/拆位/试填/恒等式/思维）](https://leetcode.cn/circle/discuss/dHn9Vk/)
6. [图论算法（DFS/BFS/拓扑排序/最短路/最小生成树/二分图/基环树/欧拉路径）](https://leetcode.cn/circle/discuss/01LUak/)
7. [动态规划（入门/背包/状态机/划分/区间/状压/数位/数据结构优化/树形/博弈/概率期望）](https://leetcode.cn/circle/discuss/tXLS3i/)
8. [常用数据结构（前缀和/差分/栈/队列/堆/字典树/并查集/树状数组/线段树）](https://leetcode.cn/circle/discuss/mOr1u6/)
9. [数学算法（数论/组合/概率期望/博弈/计算几何/随机算法）](https://leetcode.cn/circle/discuss/IYT3ss/)
10. [贪心算法（基本贪心策略/反悔/区间/字典序/数学/思维/脑筋急转弯/构造）](https://leetcode.cn/circle/discuss/g6KTKL/)
11. [链表、二叉树与一般树（前后指针/快慢指针/DFS/BFS/直径/LCA）](https://leetcode.cn/circle/discuss/K0n2gO/)

[我的题解精选（已分类）](https://github.com/EndlessCheng/codeforces-go/blob/master/leetcode/SOLUTIONS.md)

欢迎关注 [B站@灵茶山艾府](https://space.bilibili.com/206214)
