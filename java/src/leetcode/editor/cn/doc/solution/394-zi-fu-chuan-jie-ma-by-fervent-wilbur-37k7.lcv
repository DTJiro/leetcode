> Problem: [394. 字符串解码](https://leetcode.cn/problems/decode-string/description/)

[TOC]

# 思路

**双栈模拟**，一个栈模拟数字，一个栈模拟字符串。
因为这个涉及**括号嵌套**，内部的字符串要先模拟出来

# 步骤

从左到右遍历每个字符，分四种情况：
1. 数字
   对于数字，要注意题目条件：s 中所有整数的取值范围为 [1, 300] ，也就是**数字有可能是不止一位的**
2. 左括号[
   遍历到左括号，我们让当前字符串和当前数字分别入自己的栈。同时让它们回归初始值""和0
3. 右括号]
   遍历到右括号，那就可以进行**解码**操作了，具体而言，就是弹出数字栈的元素，作为要循环的次数，弹出字符串栈的元素，以这个元素创建容器，不断地在它后面拼接当前字符串
4. 字符
   如果是字符，直接拼接在当前字符串后面

---

# 图解例子

演示例子：3[a2[bc]]

<![IMG_2800.JPG](https://pic.leetcode.cn/1724582834-XoGVxB-IMG_2800.JPG),![IMG_2801.JPG](https://pic.leetcode.cn/1724582859-WNwpuD-IMG_2801.JPG),![IMG_2802.JPG](https://pic.leetcode.cn/1724582877-EoTwuK-IMG_2802.JPG),![IMG_2803.JPG](https://pic.leetcode.cn/1724582896-TubxZf-IMG_2803.JPG),![IMG_2804.JPG](https://pic.leetcode.cn/1724582909-ChGVAN-IMG_2804.JPG),![IMG_2805.JPG](https://pic.leetcode.cn/1724582915-BbRZkX-IMG_2805.JPG),![IMG_2806.JPG](https://pic.leetcode.cn/1724582922-gimEWt-IMG_2806.JPG),![IMG_2807.JPG](https://pic.leetcode.cn/1724582928-UBRmfW-IMG_2807.JPG),![IMG_2808.JPG](https://pic.leetcode.cn/1724582933-cVTepa-IMG_2808.JPG),![IMG_2809.JPG](https://pic.leetcode.cn/1724582940-CJbcks-IMG_2809.JPG),![IMG_2810.JPG](https://pic.leetcode.cn/1724582948-UtuPPk-IMG_2810.JPG)>

# Code

* []

```Java
class Solution {
    public String decodeString(String s) {
        /*
        双栈，一个栈模拟数字，一个栈模拟字符串
         */
        Stack<Integer> numStack = new Stack<>();
        Stack<String> stringStack = new Stack<>();

        int num = 0;
        String curString = "";

        for (int i = 0; i < s.length(); i++) {
            //当前字符
            char c = s.charAt(i);

            //如果是数字
            if(Character.isDigit(c)){
                num = num * 10 + c-'0';
            } else if (c == '[') {
                //如果是左括号，就把当前数字和字符入栈,同时重置当前数字和当前字符串
                numStack.push(num);
                stringStack.push(curString);
                num = 0;
                curString = "";
            } else if (c == ']') {
                //如果是右括号，就进行解码
                //1、得到当前字符串要重复的次数，也就是[]前的数字
                int loopTimes = numStack.pop();
                //注意这里创建的是栈顶元素的string容器
                StringBuilder temp = new StringBuilder(stringStack.pop());
                for (int j = 0; j < loopTimes; j++) {
                    temp.append(curString);
                }
                curString = temp.toString();
            }else {
                //如果是字母就更新当前字母
                curString += c;
            }
        }
        return curString;
    }
}
```

