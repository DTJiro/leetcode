> Problem: [215. 数组中的第K个最大元素](https://leetcode.cn/problems/kth-largest-element-in-an-array/description/)

[TOC]

# 思路

Top—K问题，一般用的最多的几种方法:
* 遍历选择：第k轮找到第k大的数，这个方法当k与n接近时，时间复杂度较高，趋向于O(n²)
* 排序：先对数组进行排序，在返回前k个（或后k个）数，时间复杂度为O(nlogn)，而且这个方法“超额完成任务了”
* 堆：时间复杂度为O(nlogk)

# 解题方法

堆解决这类问题
1. 初始化一个小顶堆，其堆顶元素最小。
2. 先将数组的前k个元素依次入堆。
3. 从第k+1个元素开始，若当前元素大于堆顶元素，则将堆顶元素出堆，并将当前元素入堆。
4. 遍历完成后，堆顶保存的就是最大的第k个元素。

# Code

* []

```Java
class Solution {
    public int findKthLargest(int[] nums, int k) {
        //初始化小顶堆
        Queue<Integer> heap=new PriorityQueue<Integer>();
        //将数组的前k个元素入堆
        for(int i=0;i<k;i++){
            heap.offer(nums[i]);
        }

        // 从第 k+1 个元素开始，保持堆的长度为 k
        for (int i = k; i < nums.length; i++) {
            // 若当前元素大于堆顶元素，则将堆顶元素出堆、当前元素入堆
            if (nums[i] > heap.peek()) {
                heap.poll();
                heap.offer(nums[i]);
            }
        }

        return heap.peek();
    }
}
```

* []

```python
class Solution:
    def findKthLargest(self, nums: List[int], k: int) -> int:
        heap=[]
        for i in range(k):
            heapq.heappush(heap,nums[i])
        
        for i in range(k,len(nums)):
            if nums[i]>heap[0]:
                heapq.heappop(heap)
                heapq.heappush(heap,nums[i])
        
        return heap[0]
```

