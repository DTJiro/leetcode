> Problem: [238. 除自身以外数组的乘积](https://leetcode.cn/problems/product-of-array-except-self/description/)

[TOC]

# 思路

> 动态规划

# 解题过程

1. 确定dp数组（dp table）以及下标的含义
   定义一个二维数组dp[2][nums.length] 其中第一行表示左边的乘积和 第二行表示右边的乘积和
   比如
   ![Snipaste_2024-08-13_10-13-24.png](https://pic.leetcode.cn/1723515238-koYOQu-Snipaste_2024-08-13_10-13-24.png)

2. 确定递推公式
   dp[0][i] = dp[i - 1] * nums[i - 1];
   dp[1][i] = dp[i + 1] * nums[i + 1];
3. dp数组如何初始化
   dp[0][0] = 1;
   dp[1][0] = 1;
4. 确定遍历顺序
   第一行从左到右遍历
   第二行从右到左遍历
5. 举例推导dp数组

# 复杂度

- 时间复杂度: $O(*)$
- 空间复杂度: $O(*)$

# Code

* []

```Java
class Solution {
    public int[] productExceptSelf(int[] nums) {
        int len = nums.length;
      int[][] dp = new int[2][len];
        dp[0][0] = 1;
        dp[1][len - 1] = 1;
        for(int i = 1; i < len; ++i){
              dp[0][i] = dp[0][i - 1] * nums[i - 1];
        }

        for(int i = len - 2; i >= 0; --i){
             dp[1][i] = dp[1][i + 1] * nums[i + 1];
        }

        int[] res = new int[len];
         for(int i = 0; i < len; ++i){
              res[i] = dp[0][i] * dp[1][i];
        }

        return res;

    }
}
```

