> Problem: [82. 删除排序链表中的重复元素 II](https://leetcode.cn/problems/remove-duplicates-from-sorted-list-ii/description/)

[TOC]

# 思路

1. 创建一个虚拟头结点 `dummy` 和一个指针 `tail`，初始都指向虚拟头结点。
2. 进入循环，遍历链表，循环条件是链表不为空。
3. 在循环中，首先检查当前节点 `head` 与其下一节点 `head.next` 是否相同：

- 如果不相同，说明当前节点不重复，可以加入到结果链表中，将 `tail.next` 指向 `head`，然后更新 `tail` 为当前节点 `head`。
- 如果相同，说明有重复节点，需要跳过所有相同的节点，直到找到不同的节点。

4. 循环结束后，将 `tail.next` 置为 `null`，表示新链表结束。
5. 返回 `dummy.next`，即为去除重复元素后的链表。

整体思路是通过维护一个新链表（通过 `tail` 指针），在遍历原链表的过程中，跳过所有重复的节点，将不重复的节点添加到新链表中。

# Code

* []

```Java
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */


 /**
 * 下面的代码是用于删除排序链表中的重复元素，只保留不重复的元素。下面是对代码的思路解释：
 * 1. 创建一个虚拟头结点 `dummy` 和一个指针 `tail`，初始都指向虚拟头结点。
 * 2. 进入循环，遍历链表，循环条件是链表不为空。
 * 3. 在循环中，首先检查当前节点 `head` 与其下一节点 `head.next` 是否相同：
   - 如果不相同，说明当前节点不重复，可以加入到结果链表中，将 `tail.next` 指向 `head`，然后更新 `tail` 为当前节点 `head`。
   - 如果相同，说明有重复节点，需要跳过所有相同的节点，直到找到不同的节点。
 * 4. 循环结束后，将 `tail.next` 置为 `null`，表示新链表结束。
 * 5. 返回 `dummy.next`，即为去除重复元素后的链表。
 * 整体思路是通过维护一个新链表（通过 `tail` 指针），在遍历原链表的过程中，跳过所有重复的节点，将不重复的节点添加到新链表中。
 */

 class Solution {
    public ListNode deleteDuplicates(ListNode head) {

        //创建双指针
        ListNode dummy = new ListNode(); //dummy为虚拟头结点，用于返回最终结果
        ListNode tail = dummy; //tail代表当前有效链表的结尾，tail用于具体的操作中

        while(head != null){ //只要head不为空
            
            /** 外层while循环的思路：
            * 先判断是否需要加入此节点（与下一个不重复则加入）
            * 如果符合加入条件则进入if子句，在结果链表中加入此节点
            * 当不符合判断条件的时候，会进入while子句，往后推移一个节点，同时不能加入结果链表中
            * 重复上述判断，知道不符合循环语句的判断条件，然后跳出循环，再往后推移一个节点
            * 之所以在跳出循环之后还要再后移一个节点，是因为循环中只是跳过了重复的二者中前面的一个！
            * 此时，外层循环结束此轮，继续判断head是否为空，只要不为空，则外层循环继续
            */

            //进入循环时，确保head不会与上一节点相同
            if(head.next == null || head.val != head.next.val){
                tail.next = head; //如果相邻两节点不相同，则可以加入到结果链表中
                tail = head; //然后更新tail为当前节点head，确保tail总是在结果链表中的末端
            }

            //如果head与下一节点相同，跳过相同节点。必须先跳一次，而不能是两次（考虑多重复的情况）
            while(head.next != null && head.val == head.next.val){
                head = head.next;
            }

            //因为if中需要进行此更新操作一次，while中需要进行此更新操作两次，
            //但考虑到两个以上 如三个相同的节点相邻的情况，因此需要只在while子句中更新一次！！
            //所以这里可以提出一个这样的操作到二者的公共区域
            head = head.next; 
        }

        tail.next = null; //上述循环结束后，将tail.next设置为null，代表结果链表更新结束
        return dummy.next; //返回虚拟头节点的next指针即可。
    }
}
```

