## 方法一：前缀和

### 前置知识

对于数组 $\textit{nums}$，定义它的前缀和 $\textit{s}[0]=0$，$\textit{s}[i+1] = \sum\limits_{j=0}^{i}\textit{nums}[j]$。

根据这个定义，有 $s[i+1]=s[i]+\textit{nums}[i]$。

例如 $\textit{nums}=[1,2,1,2]$，对应的前缀和数组为 $s=[0,1,3,4,6]$。

通过前缀和，我们可以把**子数组的元素和转换成两个前缀和的差**，即

$$
\sum_{j=\textit{left}}^{\textit{right}}\textit{nums}[j] = \sum\limits_{j=0}^{\textit{right}}\textit{nums}[j] - \sum\limits_{j=0}^{\textit{left}-1}\textit{nums}[j] = \textit{s}[\textit{right}+1] - \textit{s}[\textit{left}]
$$

例如 $\textit{nums}$ 的子数组 $[2,1,2]$ 的和就可以用 $s[4]-s[1]=6-1=5$ 算出来。

**注**：$s[0]=0$ 表示一个空数组的元素和。为什么要额外定义它？想一想，如果要计算的子数组恰好是一个前缀（从 $\textit{nums}[0]$ 开始），你要用 $s[\textit{right}]$ 减去谁呢？通过定义 $s[0]=0$，任意子数组（包括前缀）都可以表示为两个前缀和的差。

### 思路

由于子数组的元素和等于两个前缀和的差，所以求出 $\textit{nums}$ 的前缀和，问题就变成 [121. 买卖股票的最佳时机](https://leetcode.cn/problems/best-time-to-buy-and-sell-stock/) 了。本题子数组不能为空，相当于一定要交易一次。

我们可以一边遍历数组计算前缀和，一边维护前缀和的最小值（相当于股票最低价格），用当前的前缀和（卖出价格）减去前缀和的最小值（买入价格），就得到了以当前元素结尾的子数组和的最大值（利润），用它来更新答案的最大值（最大利润）。

请注意，由于题目要求子数组不能为空，应当先计算前缀和-最小前缀和，再更新最小前缀和。相当于不能在同一天买入股票又卖出股票。

如果先更新最小前缀和，再计算前缀和-最小前缀和，就会把空数组的元素和 $0$ 算入答案。

示例 1 $[-2,1,-3,4,-1,2,1,-5,4]$ 的计算流程如下：

| $i$  |  前缀和 | 最小前缀和  | 前缀和-最小前缀和  |
|---|---|---|---|
| $0$  | $-2$|  $0$   | $-2$   |
| $1$  |   $-1$|  $-2$ |   $1$ |
| $2$  |   $-4$|  $-2$ |   $-2$ |
| $3$  |   $0$|  $-4$  |    $4$ |
| $4$  |   $-1$|  $-4$ |     $3$ |
| $5$  |   $1$|  $-4$  |    $5$ |
| $6$  |   $2$|  $-4$  |    $6$ |
| $7$  |   $-3$|  $-4$ |   $1$ |
| $8$  |   $1$|  $-4$  |    $5$ |

前缀和-最小前缀和的最大值等于 $6$，即为答案。

* [sol-Python3]

```py
class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        ans = -inf
        min_pre_sum = pre_sum = 0
        for x in nums:
            pre_sum += x  # 当前的前缀和
            ans = max(ans, pre_sum - min_pre_sum)  # 减去前缀和的最小值
            min_pre_sum = min(min_pre_sum, pre_sum)  # 维护前缀和的最小值
        return ans
```

* [sol-Java]

```java
class Solution {
    public int maxSubArray(int[] nums) {
        int ans = Integer.MIN_VALUE;
        int minPreSum = 0;
        int preSum = 0;
        for (int x : nums) {
            preSum += x; // 当前的前缀和
            ans = Math.max(ans, preSum - minPreSum); // 减去前缀和的最小值
            minPreSum = Math.min(minPreSum, preSum); // 维护前缀和的最小值
        }
        return ans;
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int ans = INT_MIN;
        int min_pre_sum = 0;
        int pre_sum = 0;
        for (int x : nums) {
            pre_sum += x; // 当前的前缀和
            ans = max(ans, pre_sum - min_pre_sum); // 减去前缀和的最小值
            min_pre_sum = min(min_pre_sum, pre_sum); // 维护前缀和的最小值
        }
        return ans;
    }
};
```

* [sol-C]

```c
#define max(a, b) ((b) > (a) ? (b) : (a))
#define min(a, b) ((b) < (a) ? (b) : (a))

int maxSubArray(int* nums, int numsSize) {
    int ans = INT_MIN;
    int min_pre_sum = 0;
    int pre_sum = 0;
    for (int i = 0; i < numsSize; i++) {
        pre_sum += nums[i]; // 当前的前缀和
        ans = max(ans, pre_sum - min_pre_sum); // 减去前缀和的最小值
        min_pre_sum = min(min_pre_sum, pre_sum); // 维护前缀和的最小值
    }
    return ans;
}
```

* [sol-Go]

```go
func maxSubArray(nums []int) int {
    ans := math.MinInt
    minPreSum := 0
    preSum := 0
    for _, x := range nums {
        preSum += x // 当前的前缀和
        ans = max(ans, preSum-minPreSum)   // 减去前缀和的最小值
        minPreSum = min(minPreSum, preSum) // 维护前缀和的最小值
    }
    return ans
}
```

* [sol-JavaScript]

```js
var maxSubArray = function(nums) {
    let ans = -Infinity;
    let minPreSum = 0;
    let preSum = 0;
    for (const x of nums) {
        preSum += x; // 当前的前缀和
        ans = Math.max(ans, preSum - minPreSum); // 减去前缀和的最小值
        minPreSum = Math.min(minPreSum, preSum); // 维护前缀和的最小值
    }
    return ans;
};
```

* [sol-Rust]

```rust
impl Solution {
    pub fn max_sub_array(nums: Vec<i32>) -> i32 {
        let mut ans = i32::MIN;
        let mut min_pre_sum = 0;
        let mut pre_sum = 0;
        for x in nums {
            pre_sum += x; // 当前的前缀和
            ans = ans.max(pre_sum - min_pre_sum); // 减去前缀和的最小值
            min_pre_sum = min_pre_sum.min(pre_sum); // 维护前缀和的最小值
        }
        ans
    }
}
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(n)$，其中 $n$ 为 $\textit{nums}$ 的长度。
- 空间复杂度：$\mathcal{O}(1)$。仅用到若干额外变量。

## 方法二：动态规划

定义 $f[i]$ 表示以 $\textit{nums}[i]$ 结尾的最大子数组和。

分类讨论：

- $\textit{nums}[i]$ 单独组成一个子数组，那么 $f[i] = \textit{nums}[i]$。
- $\textit{nums}[i]$ 和前面的子数组拼起来，也就是在以 $\textit{nums}[i-1]$ 结尾的最大子数组和之后添加 $\textit{nums}[i]$，那么 $f[i] = f[i-1] + \textit{nums}[i]$。

两种情况取最大值，得

$$
f[i] =
\begin{cases}
\textit{nums}[i],\ &i=0\\
\max(f[i-1], 0) + \textit{nums}[i],\ &i\ge 1
\end{cases}
$$

答案为 $\max(f)$。

### 优化前

* [sol-Python3]

```py
class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        f = [0] * len(nums)
        f[0] = nums[0]
        for i in range(1, len(nums)):
            f[i] = max(f[i - 1], 0) + nums[i]
        return max(f)
```

* [sol-Java]

```java
class Solution {
    public int maxSubArray(int[] nums) {
        int[] f = new int[nums.length];
        f[0] = nums[0];
        int ans = f[0];
        for (int i = 1; i < nums.length; i++) {
            f[i] = Math.max(f[i - 1], 0) + nums[i];
            ans = Math.max(ans, f[i]);
        }
        return ans;
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        vector<int> f(nums.size());
        f[0] = nums[0];
        for (int i = 1; i < nums.size(); i++) {
            f[i] = max(f[i - 1], 0) + nums[i];
        }
        return ranges::max(f);
    }
};
```

* [sol-C]

```c
#define max(a, b) ((b) > (a) ? (b) : (a))

int maxSubArray(int* nums, int numsSize) {
    int* f = malloc(numsSize * sizeof(int));
    f[0] = nums[0];
    int ans = f[0];
    for (int i = 1; i < numsSize; i++) {
        f[i] = max(f[i - 1], 0) + nums[i];
        ans = max(ans, f[i]);
    }
    free(f);
    return ans;
}
```

* [sol-Go]

```go
func maxSubArray(nums []int) int {
    f := make([]int, len(nums))
    f[0] = nums[0]
    for i := 1; i < len(nums); i++ {
        f[i] = max(f[i-1], 0) + nums[i]
    }
    return slices.Max(f)
}
```

* [sol-JavaScript]

```js
var maxSubArray = function(nums) {
    const f = Array(nums.length);
    f[0] = nums[0];
    for (let i = 1; i < nums.length; i++) {
        f[i] = Math.max(f[i - 1], 0) + nums[i];
    }
    return Math.max(...f);
};
```

* [sol-Rust]

```rust
impl Solution {
    pub fn max_sub_array(nums: Vec<i32>) -> i32 {
        let mut f = vec![0; nums.len()];
        f[0] = nums[0];
        for i in 1..nums.len() {
            f[i] = f[i - 1].max(0) + nums[i];
        }
        *f.iter().max().unwrap()
    }
}
```

### 空间优化

由于计算 $f[i]$ 只会用到 $f[i-1]$，不会用到更早的状态，所以可以用一个变量滚动计算。具体请看视频讲解 [动态规划入门：从记忆化搜索到递推](https://www.bilibili.com/video/BV1Xj411K7oF/)。

状态转移方程简化为：

$$
f = \max(f, 0) + \textit{nums}[i]
$$

$f$ 可以初始化成 $0$ 或者任意负数。

* [sol-Python3]

```py
class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        ans = -inf  # 注意答案可以是负数，不能初始化成 0
        f = 0
        for x in nums:
            f = max(f, 0) + x
            ans = max(ans, f)
        return ans
```

* [sol-Java]

```java
class Solution {
    public int maxSubArray(int[] nums) {
        int ans = Integer.MIN_VALUE; // 注意答案可以是负数，不能初始化成 0
        int f = 0;
        for (int x : nums) {
            f = Math.max(f, 0) + x;
            ans = Math.max(ans, f);
        }
        return ans;
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int ans = INT_MIN; // 注意答案可以是负数，不能初始化成 0
        int f = 0;
        for (int x : nums) {
            f = max(f, 0) + x;
            ans = max(ans, f);
        }
        return ans;
    }
};
```

* [sol-C]

```c
#define max(a, b) ((b) > (a) ? (b) : (a))

int maxSubArray(int* nums, int numsSize) {
    int ans = INT_MIN; // 注意答案可以是负数，不能初始化成 0
    int f = 0;
    for (int i = 0; i < numsSize; i++) {
        f = max(f, 0) + nums[i];
        ans = max(ans, f);
    }
    return ans;
}
```

* [sol-Go]

```go
func maxSubArray(nums []int) int {
    ans := math.MinInt // 注意答案可以是负数，不能初始化成 0
    f := 0
    for _, x := range nums {
        f = max(f, 0) + x
        ans = max(ans, f)
    }
    return ans
}
```

* [sol-JavaScript]

```js
var maxSubArray = function(nums) {
    let ans = -Infinity; // 注意答案可以是负数，不能初始化成 0
    let f = 0;
    for (const x of nums) {
        f = Math.max(f, 0) + x;
        ans = Math.max(ans, f);
    }
    return ans;
};
```

* [sol-Rust]

```rust
impl Solution {
    pub fn max_sub_array(nums: Vec<i32>) -> i32 {
        let mut ans = i32::MIN; // 注意答案可以是负数，不能初始化成 0
        let mut f = 0;
        for x in nums {
            f = f.max(0) + x;
            ans = ans.max(f);
        }
        ans
    }
}
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(n)$，其中 $n$ 为 $\textit{nums}$ 的长度。
- 空间复杂度：$\mathcal{O}(1)$。仅用到若干额外变量。

## 思考题

1. 如果改成返回和最大的子数组，应当如何修改代码？
2. 如果子数组的长度有下界，要怎么做？
3. 如果子数组的长度有上界，要怎么做？

欢迎在评论区发表你的思路。

## 相似题目

- [2606. 找到最大开销的子字符串](https://leetcode.cn/problems/find-the-substring-with-maximum-cost/) 1422
- [1749. 任意子数组和的绝对值的最大值](https://leetcode.cn/problems/maximum-absolute-sum-of-any-subarray/) 1542
- [1191. K 次串联后最大子数组之和](https://leetcode.cn/problems/k-concatenation-maximum-sum/) 1748
- [918. 环形子数组的最大和](https://leetcode.cn/problems/maximum-sum-circular-subarray/) 1777
- [2321. 拼接数组的最大分数](https://leetcode.cn/problems/maximum-score-of-spliced-array/) 1791
- [1186. 删除一次得到子数组最大和](https://leetcode.cn/problems/maximum-subarray-sum-with-one-deletion/) 1799

## 分类题单

[如何科学刷题？](https://leetcode.cn/circle/discuss/RvFUtj/)

1. [滑动窗口（定长/不定长/多指针）](https://leetcode.cn/circle/discuss/0viNMK/)
2. [二分算法（二分答案/最小化最大值/最大化最小值/第K小）](https://leetcode.cn/circle/discuss/SqopEo/)
3. [单调栈（基础/矩形面积/贡献法/最小字典序）](https://leetcode.cn/circle/discuss/9oZFK9/)
4. [网格图（DFS/BFS/综合应用）](https://leetcode.cn/circle/discuss/YiXPXW/)
5. [位运算（基础/性质/拆位/试填/恒等式/思维）](https://leetcode.cn/circle/discuss/dHn9Vk/)
6. [图论算法（DFS/BFS/拓扑排序/最短路/最小生成树/二分图/基环树/欧拉路径）](https://leetcode.cn/circle/discuss/01LUak/)
7. [动态规划（入门/背包/状态机/划分/区间/状压/数位/数据结构优化/树形/博弈/概率期望）](https://leetcode.cn/circle/discuss/tXLS3i/)
8. [常用数据结构（前缀和/差分/栈/队列/堆/字典树/并查集/树状数组/线段树）](https://leetcode.cn/circle/discuss/mOr1u6/)
9. [数学算法（数论/组合/概率期望/博弈/计算几何/随机算法）](https://leetcode.cn/circle/discuss/IYT3ss/)
10. [贪心算法（基本贪心策略/反悔/区间/字典序/数学/思维/脑筋急转弯/构造）](https://leetcode.cn/circle/discuss/g6KTKL/)

[我的题解精选（已分类）](https://github.com/EndlessCheng/codeforces-go/blob/master/leetcode/SOLUTIONS.md)

欢迎关注 [B站@灵茶山艾府](https://space.bilibili.com/206214)
