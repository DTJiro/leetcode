### 解题思路

题目要求获取一个数据流排序后的中位数，那么可以使用两个优先队列（堆）实现。
该题使用一个大顶堆，一个小顶堆完成。
- 大顶堆的每个节点的值大于等于左右孩子节点的值，堆顶为最大值。
- 小顶堆的每个节点的值小于等于左右孩子节点的值，堆顶为最小值。

因此我们使用 **大顶堆(maxHeap)** 来存储数据流中较小一半的值，用 **小顶堆(minHeap)** 来存储数据流中较大一半的值。`即“大顶堆的堆顶”与“小顶堆的堆顶”就是排序数据流的两个中位数`。
如图所示，大顶堆(maxHeap)置于下方，小顶堆(minHeap)倒置于上方，两个堆组合起来像一个沙漏的形状。
根据堆的性质，可以判断两个堆的值从下往上递增，即：
`maxHeap堆底 <= maxHeap堆顶 <= minHeap堆顶 <= minHeap堆底。`
![41-1.png](https://pic.leetcode-cn.com/1638802694-YTYpGU-41-1.png)
题目要求获取数据流排序后的中位数，而根据数据流的奇偶性以及堆的性质，将获取中位数的情况分为两类：
1. 数据流为奇数时，保证两个堆的长度相差1，那么长度较大的堆的堆顶就是中位数；
2. 数据流为偶数时，保证两个堆的长度相等，两个堆的堆顶相加除二就是中位数。

那么我们要保证每次插入元素后，两堆维持**相对长度**。让minHeap为长度较大的堆，每次插入元素时进行判断：
- 当两堆总长度为偶数时，即两堆长度相等，将新元素插入到minHeap，插入后minHeap比maxHeap长度大1；
- 当两堆总长度为奇数时，即两堆长度不等，将新元素插入到maxHeap，插入后两堆长度相等；

还要保证插入元素后，两堆仍是保证从下往上递增的**顺序性**。如上面的偶数情况，将新元素x直接插入到minHeap，是有可能破坏两堆的顺序性的，例如：（minHeap是存储“较大一半”的值）
- 若x的值恰好为“较大一半”，直接将插入到“较大一半”的minHeap中，是不会破坏顺序的；
- 若x的值为“较小一半”，而此时却插入到“较大一半”的minHeap中，是会破坏顺序的。

那么，每次新元素插入时，都需要先插入到另一个堆，进行重新排序后，再将最值拿出来插入正确的堆中。因此，最终得出的结论为：
- **当两堆总大小为偶数时，即两堆大小相等，先将新元素插入maxHeap，重新排序后将新的最值拿出并插入到minHeap**；
- **当两堆总大小为奇数时，即两堆大小不等，先将新元素插入minHeap，重新排序后将新的最值拿出并插入到maxHeap**；

![41-2.png](https://pic.leetcode-cn.com/1638804798-lOqPnK-41-2.png)

### 代码

* java

```java
class MedianFinder {
    // 大顶堆存储较小一半的值
    PriorityQueue<Integer> maxHeap;
    // 小顶堆存储较大一般的值
    PriorityQueue<Integer> minHeap;
    /** initialize your data structure here. */
    public MedianFinder() {
        maxHeap = new PriorityQueue<Integer>((x, y) -> (y - x));
        minHeap = new PriorityQueue<Integer>();
    }
    
    public void addNum(int num) {
        // 长度为奇数时先放入小顶堆,重新排序后在插入到大顶堆
        if(maxHeap.size() != minHeap.size()) {
            minHeap.add(num);
            maxHeap.add(minHeap.poll());
        } else {
            // 长度为偶数时先放入大顶堆,重新排序后在插入到小顶堆
            maxHeap.add(num);
            minHeap.add(maxHeap.poll());
        }
    }
    
    public double findMedian() {
        if(maxHeap.size() != minHeap.size()) {
            return minHeap.peek();
        } else {
            return (maxHeap.peek() + minHeap.peek()) / 2.0;
        }
    }
}

```

觉得文章不错的话，留下一个赞赞呗~
