> Problem: [641. 设计循环双端队列](https://leetcode.cn/problems/design-circular-deque/description/)

[TOC]

# 思路

![iShot_2024-02-02_12.16.26.jpg](https://pic.leetcode.cn/1706847398-LuunOG-iShot_2024-02-02_12.16.26.jpg)

# Code

* []

```JavaScript
var MyCircularDeque = function (k) {
    this.front = 0;
    this.rear = 0;
    this.capacity = k + 1;
    this.arr = new Array(this.capacity);
};

MyCircularDeque.prototype.insertFront = function (value) {
    if (this.isFull()) {
        return false;
    }
    this.front = (this.front - 1 + this.capacity) % this.capacity;
    this.arr[this.front] = value;
    return true;
};

MyCircularDeque.prototype.insertLast = function (value) {
    if (this.isFull()) {
        return false;
    }
    this.arr[this.rear] = value;
    this.rear = (this.rear + 1) % this.capacity;
    return true;
};

MyCircularDeque.prototype.deleteFront = function () {
    if (this.isEmpty()) {
        return false;
    }
    // front 被设计在数组的开头，所以是 +1
    this.front = (this.front + 1) % this.capacity;
    return true;
};

MyCircularDeque.prototype.deleteLast = function () {
    if (this.isEmpty()) {
        return false;
    }
    // rear 被设计在数组的末尾，所以是 -1
    this.rear = (this.rear - 1 + this.capacity) % this.capacity;
    return true;
};

MyCircularDeque.prototype.getFront = function () {
    if (this.isEmpty()) {
        return -1;
    }
    return this.arr[this.front];
};

MyCircularDeque.prototype.getRear = function () {
    if (this.isEmpty()) {
        return -1;
    }
    // 当 rear 为 0 时防止数组越界
    return this.arr[(this.rear - 1 + this.capacity) % this.capacity];
};

MyCircularDeque.prototype.isEmpty = function () {
    return this.front === this.rear;
};

MyCircularDeque.prototype.isFull = function () {
    // 注意：这是这个经典设计的原因
    return (this.rear + 1) % this.capacity === this.front;
};
```

# [题解传送门](https://ricepudding.cn/article/ac893f1c)

