> Problem: [111. 二叉树的最小深度](https://leetcode.cn/problems/minimum-depth-of-binary-tree/description/)

[TOC]

# 思路

> 区别于最大深度问题。如果使用最大深度解法，存在当树的左或者右子树为空，会直接返回深度为1的错误，实际深度是不空那侧子树的最小深度+1

# 解题方法

> DFS
> 存在四种情况：
> 1.当前子树的左右子树空，直接返回0
> 2.当前子树的左子树空，返回右子树最小深度+1
> 3.当前子树的右子树空，返回左子树最小深度+1
> 4.当前子树的左右子树不空，直接返回左右子树更小那侧深度+1

# Code

* []

```Java
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int minDepth(TreeNode root) {
        // 当前子树空
        if(root==null) return 0;
        // 当前子树只有右子树
        if(root.left==null) return minDepth(root.right)+1;
        // 当前子树只有左子树
        if(root.right==null) return minDepth(root.left)+1;
        // 当前子树有左右子树
        return Math.min(minDepth(root.left),minDepth(root.right))+1;  
    }
}
```

