> [221.最大正方形](https://leetcode-cn.com/problems/maximal-square/)

[TOC]

# 题目

在一个由 `0` 和 `1` 组成的二维矩阵内，找到只包含 `1` 的最大正方形，并返回其面积。

# 题目分析

> 参考 [官方题解 —— 《最大正方形》](https://leetcode.cn/problems/maximal-square/solutions/234964/zui-da-zheng-fang-xing-by-leetcode-solution/?envType=study-plan-v2&envId=top-interview-150)

## 思路分析

这道题我们要求最大正方形的面积，可以转化为求最大正方形的边长。如何去找到这个最大边长呢？

![image-20240513151905895.png](https://pic.leetcode.cn/1715703335-BlbXoT-image-20240513151905895.png)

我们可以发现：我们要求 `matrix[i][j]` 的最大边长要用到其左上角 `matrix[i-1][j-1]` 的最大边长，这就出现了子问题。并且其上方连续1的个数可以等价于 `matrix[i-1][j]` 的最大边长，左侧连续1的个数可以等价于 `matrix[i][j-1]`  的最大边长。

![image-20240513152725946.png](https://pic.leetcode.cn/1715703335-ScwBXb-image-20240513152725946.png)

因此我们定义 `dp[i][j]` 表示以 `(i, j)` 为正方形右下角构成的最大正方形的边长：

- 如果 `matrix[i][j] == 0`，最大边长肯定为 `0`；

- 否则，就按上述去看其他三个位置的状态，即状态转移方程为：

  * 

  ```
  dp[i][j] = 1 + min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1])
  ```

最终的最大正方形边长就为 `max(dp[i][j])`。

### 边界条件

- 当 `i = j = 0` 时，`i - 1` 和 `j - 1` 均不存在。矩阵左上角可构成的最大正方形取决于其本身是否为 `1`；
- 当 `i = 0, j != 0`，即首行元素，最大正方形边长只可能为1；取决于其本身是否为 `1`；
- 当 `i != 0, j = 0`，即首列元素，最大正方形边长只可能为1；取决于其本身是否为 `1`；

### 代码

* []

```Java
class Solution {
    public int maximalSquare(char[][] matrix) {
        int m = matrix.length;
        int n = matrix[0].length;
        int[][] dp = new int[m][n];  // dp[i][j]表示以(i, j)为正方形右下角构成的最大正方形的边长
        int maxSide = 0;
        // 处理边界条件 首行元素和首列元素的最大边长取决于单元格本身是否为1
        for(int j = 0; j < n; j++){
            dp[0][j] = matrix[0][j] - '0';
            maxSide = Math.max(maxSide, dp[0][j]);
        }
        for(int i = 0; i < m; i++){
            dp[i][0] = matrix[i][0] - '0';
            maxSide = Math.max(maxSide, dp[i][0]);
        }
        // 状态转移
        for(int i = 1; i < m; i++){
            for(int j = 1; j < n; j++){
                if(matrix[i][j] == '0')continue;
                dp[i][j] = 1 + Math.min(dp[i-1][j-1], Math.min(dp[i-1][j], dp[i][j-1]));
                maxSide = Math.max(maxSide, dp[i][j]);
            }
        }
        return maxSide * maxSide;
    }
}
```

* []

```Python
class Solution:
    def maximalSquare(self, matrix: List[List[str]]) -> int:
        m, n = len(matrix), len(matrix[0])
        dp = [[0] * n for _ in range(m)]  # dp[i][j]表示以(i, j)为正方形右下角构成的最大正方形的边长
        # 处理边界条件 首行元素和首列元素的最大边长取决于单元格本身是否为1
        max_side = 0
        for j in range(n):
            dp[0][j] = int(matrix[0][j])
            max_side = max(max_side, dp[0][j])
        for i in range(m):
            dp[i][0] = int(matrix[i][0])
            max_side = max(max_side, dp[i][0])
        # 状态转移
        for i in range(1, m):
            for j in range(1, n):
                if matrix[i][j] == '0': continue
                dp[i][j] = 1 + min(dp[i-1][j-1], min(dp[i-1][j], dp[i][j-1]))
                max_side = max(max_side, dp[i][j])
        return max_side * max_side
```

* []

```C++
class Solution {
public:
    int maximalSquare(vector<vector<char>>& matrix) {
        int m = matrix.size();
        int n = matrix[0].size();
        vector<vector<int>> dp(m, vector<int>(n));  // dp[i][j]表示以(i, j)为正方形右下角构成的最大正方形的边长
        int maxSide = 0;
        // 处理边界条件 首行元素和首列元素的最大边长取决于单元格本身是否为1
        for(int j = 0; j < n; j++){
            dp[0][j] = matrix[0][j] - '0';
            maxSide = max(maxSide, dp[0][j]);
        }
        for(int i = 0; i < m; i++){
            dp[i][0] = matrix[i][0] - '0';
            maxSide = max(maxSide, dp[i][0]);
        }
        // 状态转移
        for(int i = 1; i < m; i++){
            for(int j = 1; j < n; j++){
                if(matrix[i][j] == '0')continue;
                dp[i][j] = 1 + min(dp[i-1][j-1], min(dp[i-1][j], dp[i][j-1]));
                maxSide = max(maxSide, dp[i][j]);
            }
        }
        return maxSide * maxSide;
    }
};
```

## 统一状态

参见  [动态规划+空间优化：一步步进行代码优化](https://leetcode.cn/problems/minimum-path-sum/solution/javapython3cdong-tai-gui-hua-kong-jian-y-a5sz/)

为了避免每次都对 `i` 和 `j` 是否为 `0` 进行判断，我们可以用 `dp[i+1][j+1]` 代替原来的 `dp[i][j]`（即用 `i+1` 和 `j+1` 代替原来的 `i` 和 `j`），从而当 `i` 和 `j` 为 `0` 时也存在对应的状态【设置为 `0` 保证首行首列状态转移的 `min()` 结果为 `0`】

### 代码

* []

```Java
class Solution {
    public int maximalSquare(char[][] matrix) {
        int m = matrix.length;
        int n = matrix[0].length;
        int[][] dp = new int[m+1][n+1];  // dp[i+1][j+1]表示以(i, j)为正方形右下角构成的最大正方形的边长
        int maxSide = 0;
        // 状态转移
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(matrix[i][j] == '0')continue;
                dp[i+1][j+1] = 1 + Math.min(dp[i][j], Math.min(dp[i][j+1], dp[i+1][j]));
                maxSide = Math.max(maxSide, dp[i+1][j+1]);
            }
        }
        return maxSide * maxSide;
    }
}
```

* []

```Python
class Solution:
    def maximalSquare(self, matrix: List[List[str]]) -> int:
        m, n = len(matrix), len(matrix[0])
        dp = [[0] * (n+1) for _ in range(m+1)]  # dp[i][j]表示以(i, j)为正方形右下角构成的最大正方形的边长
        max_side = 0
        # 状态转移
        for i in range(m):
            for j in range( n):
                if matrix[i][j] == '0': continue
                dp[i+1][j+1] = 1 + min(dp[i][j], min(dp[i][j+1], dp[i+1][j]))
                max_side = max(max_side, dp[i+1][j+1])
        return max_side * max_side
```

* []

```C++
class Solution {
public:
    int maximalSquare(vector<vector<char>>& matrix) {
        int m = matrix.size();
        int n = matrix[0].size();
        vector<vector<int>> dp(m+1, vector<int>(n+1));  // dp[i+1][j+1]表示以(i, j)为正方形右下角构成的最大正方形的边长
        int maxSide = 0;
        // 状态转移
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(matrix[i][j] == '0')continue;
                // 用dp[i+1][j+1]代替dp[i][j]
                dp[i+1][j+1] = 1 + min(dp[i][j], min(dp[i][j+1], dp[i+1][j]));
                maxSide = max(maxSide, dp[i+1][j+1]);
            }
        }
        return maxSide * maxSide;
    }
};
```

## 空间优化

根据状态转移方程，我们更新状态 `dp[i][j]` 只需要 `dp[i-1][j-1], dp[i-1][j], dp[i][j-1]`。即只需要上一行和前一列的数据，因此我们可以用一维滚动数组替代二维数组。

![image-20240515001337972.png](https://pic.leetcode.cn/1715703335-llpzTk-image-20240515001337972.png)

因为我们同时需要左侧，上侧，左上角的数据，势必有数据会被覆盖掉。因此需要一个额外的变量来存储左上角的数据。

### 代码

* []

```Java
class Solution {
    public int maximalSquare(char[][] matrix) {
        int m = matrix.length;
        int n = matrix[0].length;
        // dp[j+1]表示以当前的(i, j)为正方形右下角构成的最大正方形的边长
        // 初始dp就对应着i=0时的值
        int[] dp = new int[n+1];  
        int maxSide = 0;
        // 状态转移
        for(int i = 0; i < m; i++){
            int left_up = dp[0];    // 初始的左上角位置为dp[i][j], j初始为0
            for(int j = 0; j < n; j++){
                int next_left_up = dp[j+1];   // 记录dp[i][j+1]作为下一个位置j+1的left_up
                if(matrix[i][j] == '0'){
                    dp[j+1] = 0;
                    continue;   // 0字符无法构成正方形，需要手动置0
                }
                dp[j+1] = 1 + Math.min(left_up, Math.min(dp[j+1], dp[j]));
                maxSide = Math.max(maxSide, dp[j+1]);
                left_up = next_left_up;    // 更新left_up
            }
        }
        return maxSide * maxSide;
    }
}
```

* []

```Python
class Solution:
    def maximalSquare(self, matrix: List[List[str]]) -> int:
        m, n = len(matrix), len(matrix[0])
        dp = [[0] * (n+1) for _ in range(m+1)]  # dp[i][j]表示以(i, j)为正方形右下角构成的最大正方形的边长
        max_side = 0
        # 状态转移
        for i in range(m):
            for j in range( n):
                if matrix[i][j] == '0': continue
                dp[i+1][j+1] = 1 + min(dp[i][j], min(dp[i][j+1], dp[i+1][j]))
                max_side = max(max_side, dp[i+1][j+1])
        return max_side * max_side
```

* []

```C++
class Solution {
public:
    int maximalSquare(vector<vector<char>>& matrix) {
        int m = matrix.size();
        int n = matrix[0].size();
        // dp[j+1]表示以当前的(i, j)为正方形右下角构成的最大正方形的边长
        // 初始dp就对应着i=0时的值
        vector<int> dp(n+1);  
        int maxSide = 0;
        // 状态转移
        for(int i = 0; i < m; i++){
            int left_up = dp[0];    // 初始的左上角位置为dp[i][j], j初始为0
            for(int j = 0; j < n; j++){
                int next_left_up = dp[j+1];   // 记录dp[i][j+1]作为下一个位置j+1的left_up
                if(matrix[i][j] == '0'){
                    dp[j+1] = 0;
                    continue;   // 0字符无法构成正方形，需要手动置0
                }
                // 当前的dp[j+1]对应dp[i][j+1], dp[j]对应dp[i+1][j], left_up对应dp[i][j]
                dp[j+1] = 1 + min(left_up, min(dp[j+1], dp[j]));
                maxSide = max(maxSide, dp[j+1]);
                left_up = next_left_up;    // 更新left_up
            }
        }
        return maxSide * maxSide;
    }
};
```

