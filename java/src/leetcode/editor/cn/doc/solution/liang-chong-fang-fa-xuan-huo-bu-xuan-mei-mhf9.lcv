## 方法一：选或不选

**前置题目**：[78. 子集](https://leetcode.cn/problems/subsets/)

**视频讲解**：[回溯算法套路①子集型回溯【基础算法精讲 14】](https://www.bilibili.com/video/BV1mG4y1A7Gu/)

用 $\textit{dfs}(i,\textit{left})$ 来回溯，设当前枚举到 $\textit{candidates}[i]$，剩余要选的元素之和为 $\textit{left}$，按照选或不选分类讨论：

- 不选：递归到 $\textit{dfs}(i+1,\textit{left})$。
- 选：递归到 $\textit{dfs}(i,\textit{left}-\textit{candidates}[i])$。注意 $i$ 不变，表示在下次递归中可以继续选 $\textit{candidates}[i]$。

注：这个思路类似 [完全背包](https://www.bilibili.com/video/BV16Y411v7Y6/)。

如果递归中发现 $\textit{left}=0$ 则说明找到了一个合法组合，复制一份 $\textit{path}$ 加入答案。

递归边界：如果 $i=n$ 或者 $\textit{left} < 0$ 则返回。

递归入口：$\textit{dfs}(0, \textit{target})$。

* [sol-Python3]

```py
class Solution:
    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:
        ans = []
        path = []

        def dfs(i: int, left: int) -> None:
            if left == 0:
                # 找到一个合法组合
                ans.append(path.copy())
                return

            if i == len(candidates) or left < 0:
                return

            # 不选
            dfs(i + 1, left)

            # 选
            path.append(candidates[i])
            dfs(i, left - candidates[i])
            path.pop()  # 恢复现场

        dfs(0, target)
        return ans
```

* [sol-Java]

```java
class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> path = new ArrayList<>();
        dfs(0, target, candidates, ans, path);
        return ans;
    }

    private void dfs(int i, int left, int[] candidates, List<List<Integer>> ans, List<Integer> path) {
        if (left == 0) {
            // 找到一个合法组合
            ans.add(new ArrayList<>(path));
            return;
        }

        if (i == candidates.length || left < 0) {
            return;
        }

        // 不选
        dfs(i + 1, left, candidates, ans, path);

        // 选
        path.add(candidates[i]);
        dfs(i, left - candidates[i], candidates, ans, path);
        path.remove(path.size() - 1); // 恢复现场
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        vector<vector<int>> ans;
        vector<int> path;

        function<void(int, int)> dfs = [&](int i, int left) {
            if (left == 0) {
                // 找到一个合法组合
                ans.push_back(path);
                return;
            }

            if (i == candidates.size() || left < 0) {
                return;
            }

            // 不选
            dfs(i + 1, left);

            // 选
            path.push_back(candidates[i]);
            dfs(i, left - candidates[i]);
            path.pop_back(); // 恢复现场
        };

        dfs(0, target);
        return ans;
    }
};
```

* [sol-Go]

```go
func combinationSum(candidates []int, target int) (ans [][]int) {
    path := []int{}
    var dfs func(int, int)
    dfs = func(i, left int) {
        if left == 0 {
            // 找到一个合法组合
            ans = append(ans, slices.Clone(path))
            return
        }

        if i == len(candidates) || left < 0 {
            return
        }

        // 不选
        dfs(i+1, left)

        // 选
        path = append(path, candidates[i])
        dfs(i, left-candidates[i])
        path = path[:len(path)-1] // 恢复现场
    }
    dfs(0, target)
    return ans
}
```

## 剪枝优化

把 $\textit{candidates}$ 从小到大排序，如果递归中发现 $\textit{left} < \textit{candidates}[i]$，由于后面的数字只会更大，所以无法把 $\textit{left}$ 减小到 $0$，可以直接返回。

* [sol-Python3]

```py
class Solution:
    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:
        candidates.sort()
        ans = []
        path = []

        def dfs(i: int, left: int) -> None:
            if left == 0:
                # 找到一个合法组合
                ans.append(path.copy())
                return

            if i == len(candidates) or left < candidates[i]:
                return

            # 不选
            dfs(i + 1, left)

            # 选
            path.append(candidates[i])
            dfs(i, left - candidates[i])
            path.pop()  # 恢复现场

        dfs(0, target)
        return ans
```

* [sol-Java]

```java
class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        Arrays.sort(candidates);
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> path = new ArrayList<>();
        dfs(0, target, candidates, ans, path);
        return ans;
    }

    private void dfs(int i, int left, int[] candidates, List<List<Integer>> ans, List<Integer> path) {
        if (left == 0) {
            // 找到一个合法组合
            ans.add(new ArrayList<>(path));
            return;
        }

        if (i == candidates.length || left < candidates[i]) {
            return;
        }

        // 不选
        dfs(i + 1, left, candidates, ans, path);

        // 选
        path.add(candidates[i]);
        dfs(i, left - candidates[i], candidates, ans, path);
        path.remove(path.size() - 1); // 恢复现场
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        ranges::sort(candidates);
        vector<vector<int>> ans;
        vector<int> path;

        function<void(int, int)> dfs = [&](int i, int left) {
            if (left == 0) {
                // 找到一个合法组合
                ans.push_back(path);
                return;
            }

            if (i == candidates.size() || left < candidates[i]) {
                return;
            }

            // 不选
            dfs(i + 1, left);

            // 选
            path.push_back(candidates[i]);
            dfs(i, left - candidates[i]);
            path.pop_back(); // 恢复现场
        };

        dfs(0, target);
        return ans;
    }
};
```

* [sol-Go]

```go
func combinationSum(candidates []int, target int) (ans [][]int) {
    slices.Sort(candidates)
    path := []int{}
    var dfs func(int, int)
    dfs = func(i, left int) {
        if left == 0 {
            // 找到一个合法组合
            ans = append(ans, slices.Clone(path))
            return
        }

        if i == len(candidates) || left < candidates[i] {
            return
        }

        // 不选
        dfs(i+1, left)

        // 选
        path = append(path, candidates[i])
        dfs(i, left-candidates[i])
        path = path[:len(path)-1] // 恢复现场
    }
    dfs(0, target)
    return ans
}
```

#### 复杂度分析

由如下完全背包代码可知，在 $\textit{candidates}=[2,3,4,\cdots, 31],\ \textit{target}=40$ 的极端数据下，搜索次数的上界为 $37271$。换句话说，即使题目不保证答案个数 $\le 150$，我们也能很快地找到所有答案。

* py

```py
f = [1] + [0] * 40
for i in range(2, 32):
    for j in range(i, 41):
        f[j] += f[j - i]
print(sum(f))  # 37271
```

进一步地，计算 [A002865](https://oeis.org/A002865) 的前 $\textit{target}$ 项之和，可得：

- 时间复杂度：$\mathcal{O}\left(\dfrac{e^{\pi\sqrt {(2 / 3)\cdot\textit{target}}}}{\sqrt \textit{target}}\right)$。
- 空间复杂度：$\mathcal{O}(\textit{target})$。返回值不计入。$\textit{path}$ 长度和递归深度至多为 $\mathcal{O}(\textit{target})$。

## 方法二：枚举选哪个

类似 [视频](https://www.bilibili.com/video/BV1mG4y1A7Gu/) 中的「答案视角」。同样用 $\textit{dfs}(i,\textit{left})$ 来回溯，设当前枚举到 $\textit{candidates}[i]$，剩余要选的元素之和为 $\textit{left}$，考虑枚举下个元素是谁：

- 在 $[i,n-1]$ 中枚举要填在 $\textit{path}$ 中的元素 $\textit{candidates}[j]$，然后递归到 $\textit{dfs}(j, \textit{left} - \textit{candidates}[j])$。注意这里是递归到 $j$ 不是 $j+1$，表示 $\textit{candidates}[j]$ 可以重复选取。

* [sol-Python3]

```py
class Solution:
    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:
        candidates.sort()
        ans = []
        path = []

        def dfs(i: int, left: int) -> None:
            if left == 0:
                # 找到一个合法组合
                ans.append(path.copy())
                return

            if left < candidates[i]:
                return

            # 枚举选哪个
            for j in range(i, len(candidates)):
                path.append(candidates[j])
                dfs(j, left - candidates[j])
                path.pop()  # 恢复现场

        dfs(0, target)
        return ans
```

* [sol-Java]

```java
class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        Arrays.sort(candidates);
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> path = new ArrayList<>();
        dfs(0, target, candidates, ans, path);
        return ans;
    }

    private void dfs(int i, int left, int[] candidates, List<List<Integer>> ans, List<Integer> path) {
        if (left == 0) {
            // 找到一个合法组合
            ans.add(new ArrayList<>(path));
            return;
        }

        if (left < candidates[i]) {
            return;
        }

        // 枚举选哪个
        for (int j = i; j < candidates.length; j++) {
            path.add(candidates[j]);
            dfs(j, left - candidates[j], candidates, ans, path);
            path.remove(path.size() - 1); // 恢复现场
        }
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        ranges::sort(candidates);
        vector<vector<int>> ans;
        vector<int> path;

        function<void(int, int)> dfs = [&](int i, int left) {
            if (left == 0) {
                // 找到一个合法组合
                ans.push_back(path);
                return;
            }

            if (left < candidates[i]) {
                return;
            }

            // 枚举选哪个
            for (int j = i; j < candidates.size(); j++) {
                path.push_back(candidates[j]);
                dfs(j, left - candidates[j]);
                path.pop_back(); // 恢复现场
            }
        };

        dfs(0, target);
        return ans;
    }
};
```

* [sol-Go]

```go
func combinationSum(candidates []int, target int) (ans [][]int) {
    slices.Sort(candidates)
    path := []int{}
    var dfs func(int, int)
    dfs = func(i, left int) {
        if left == 0 {
            // 找到一个合法组合
            ans = append(ans, slices.Clone(path))
            return
        }

        if left < candidates[i] {
            return
        }

        // 枚举选哪个
        for j := i; j < len(candidates); j++ {
            path = append(path, candidates[j])
            dfs(j, left-candidates[j])
            path = path[:len(path)-1] // 恢复现场
        }
    }
    dfs(0, target)
    return ans
}
```

#### 复杂度分析

同方法一。

## 方法三：完全背包预处理 + 可行性剪枝

**前置知识**：[完全背包](https://www.bilibili.com/video/BV16Y411v7Y6/)。

例如 $\textit{candidates}=[2,4,6,8,10]$ 都是偶数，但 $\textit{target}=11$ 是奇数，这种情况我们在一开始递归时，就应当判断出无解，不再继续向下递归。

怎么判断？我们可以用**完全背包**预处理出下标在 $[0,i]$ 中的 $\textit{candidates}$ 元素之和能否为 $j$，记作 $f[i+1][j]$。

如果递归中的 $\textit{left}$ 不在可以组合得到的数字中，则可以直接返回。

这一做法可以保证我们是在往正确的方向一步步递归前进的。只要题目保证方案数不超过 $150$，即使 $\textit{target}=1000$ 也能搞定。

* [sol-Python3]

```py
class Solution:
    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:
        n = len(candidates)
        # 完全背包
        f = [[False] * (target + 1) for _ in range(n + 1)]
        f[0][0] = True
        for i, x in enumerate(candidates):
            for j in range(target + 1):
                f[i + 1][j] = f[i][j] or j >= x and f[i + 1][j - x]

        ans = []
        path = []

        def dfs(i: int, left: int) -> None:
            if left == 0:
                # 找到一个合法组合
                ans.append(path.copy())
                return

            # 无法用下标在 [0, i] 中的数字组合出 left
            if left < 0 or not f[i + 1][left]:
                return

            # 不选
            dfs(i - 1, left)

            # 选
            path.append(candidates[i])
            dfs(i, left - candidates[i])
            path.pop()

        # 倒着递归，这样参数符合 f 数组的定义
        dfs(n - 1, target)
        return ans
```

* [sol-Java]

```java
class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        int n = candidates.length;
        // 完全背包
        boolean[][] f = new boolean[n + 1][target + 1];
        f[0][0] = true;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j <= target; j++) {
                f[i + 1][j] = f[i][j] || j >= candidates[i] && f[i + 1][j - candidates[i]];
            }
        }

        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> path = new ArrayList<>();
        // 倒着递归，这样参数符合 f 数组的定义
        dfs(n - 1, target, candidates, f, ans, path);
        return ans;
    }

    private void dfs(int i, int left, int[] candidates, boolean[][] f, List<List<Integer>> ans, List<Integer> path) {
        if (left == 0) {
            // 找到一个合法组合
            ans.add(new ArrayList<>(path));
            return;
        }

        // 无法用下标在 [0, i] 中的数字组合出 left
        if (left < 0 || !f[i + 1][left]) {
            return;
        }

        // 不选
        dfs(i - 1, left, candidates, f, ans, path);

        // 选
        path.add(candidates[i]);
        dfs(i, left - candidates[i], candidates, f, ans, path);
        path.remove(path.size() - 1);
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        int n = candidates.size();
        // 完全背包
        vector<vector<bool>> f(n + 1, vector<bool>(target + 1));
        f[0][0] = true;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j <= target; j++) {
                f[i + 1][j] = f[i][j] || j >= candidates[i] && f[i + 1][j - candidates[i]];
            }
        }

        vector<vector<int>> ans;
        vector<int> path;

        function<void(int, int)> dfs = [&](int i, int left) {
            if (left == 0) {
                // 找到一个合法组合
                ans.push_back(path);
                return;
            }

            // 无法用下标在 [0, i] 中的数字组合出 left
            if (left < 0 || !f[i + 1][left]) {
                return;
            }

            // 不选
            dfs(i - 1, left);

            // 选
            path.push_back(candidates[i]);
            dfs(i, left - candidates[i]);
            path.pop_back();
        };

        // 倒着递归，这样参数符合 f 数组的定义
        dfs(n - 1, target);
        return ans;
    }
};
```

* [sol-Go]

```go
func combinationSum(candidates []int, target int) (ans [][]int) {
    n := len(candidates)
    // 完全背包
    f := make([][]bool, n+1)
    f[0] = make([]bool, target+1)
    f[0][0] = true
    for i, x := range candidates {
        f[i+1] = make([]bool, target+1)
        for j, b := range f[i] {
            f[i+1][j] = b || j >= x && f[i+1][j-x]
        }
    }

    path := []int{}
    var dfs func(int, int)
    dfs = func(i, left int) {
        if left == 0 {
            // 找到一个合法组合
            ans = append(ans, slices.Clone(path))
            return
        }

        // 无法用下标在 [0, i] 中的数字组合出 left
        if left < 0 || !f[i+1][left] {
            return
        }

        // 不选
        dfs(i-1, left)

        // 选
        path = append(path, candidates[i])
        dfs(i, left-candidates[i])
        path = path[:len(path)-1]
    }

    // 倒着递归，这样参数符合 f 数组的定义
    dfs(n-1, target)
    return ans
}
```

- 时间复杂度：$\mathcal{O}\left(\min\left(\dfrac{e^{\pi\sqrt {(2 / 3)\cdot\textit{target}}}}{\sqrt \textit{target}},\ k\cdot \textit{target}\right) + n\cdot \textit{target}\right)$。其中 $n$ 为 $\textit{candidates}$ 的长度，$k\le 150$ 这是题目保证的。搜索树上至多有 $k$ 条长为 $\mathcal{O}(target)$ 的链，所以搜索树的节点个数为 $\mathcal{O}(k\cdot \textit{target})$。计算完全背包的时间为 $\mathcal{O}(n\cdot \textit{target})$。
- 空间复杂度：$\mathcal{O}(n\cdot\textit{target})$。返回值不计入。

## 分类题单

以下题单没有特定的顺序，可以按照个人喜好刷题。

1. [滑动窗口（定长/不定长/多指针）](https://leetcode.cn/circle/discuss/0viNMK/)
2. [二分算法（二分答案/最小化最大值/最大化最小值/第K小）](https://leetcode.cn/circle/discuss/SqopEo/)
3. [单调栈（基础/矩形面积/贡献法/最小字典序）](https://leetcode.cn/circle/discuss/9oZFK9/)
4. [网格图（DFS/BFS/综合应用）](https://leetcode.cn/circle/discuss/YiXPXW/)
5. [位运算（基础/性质/拆位/试填/恒等式/思维）](https://leetcode.cn/circle/discuss/dHn9Vk/)
6. [图论算法（DFS/BFS/拓扑排序/最短路/最小生成树/二分图/基环树/欧拉路径）](https://leetcode.cn/circle/discuss/01LUak/)
7. [动态规划（入门/背包/状态机/划分/区间/状压/数位/数据结构优化/树形/博弈/概率期望）](https://leetcode.cn/circle/discuss/tXLS3i/)
8. [常用数据结构（前缀和/差分/栈/队列/堆/字典树/并查集/树状数组/线段树）](https://leetcode.cn/circle/discuss/mOr1u6/)
9. [数学算法（数论/组合/概率期望/博弈/计算几何/随机算法）](https://leetcode.cn/circle/discuss/IYT3ss/)
10. [贪心算法（基本贪心策略/反悔/区间/字典序/数学/思维/脑筋急转弯/构造）](https://leetcode.cn/circle/discuss/g6KTKL/)

[我的题解精选（已分类）](https://github.com/EndlessCheng/codeforces-go/blob/master/leetcode/SOLUTIONS.md)

欢迎关注 [B站@灵茶山艾府](https://space.bilibili.com/206214)
