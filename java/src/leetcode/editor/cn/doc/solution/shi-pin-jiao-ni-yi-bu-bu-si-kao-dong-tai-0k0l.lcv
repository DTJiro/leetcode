## 视频讲解

请看[【基础算法精讲 21】](https://www.bilibili.com/video/BV1ho4y1W7QK/)，欢迎点赞关注~

## 一、递归搜索 + 保存计算结果 = 记忆化搜索

在 [122. 买卖股票的最佳时机 II](https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/solution/shi-pin-jiao-ni-yi-bu-bu-si-kao-dong-tai-o3y4/) 的基础上，只需修改**一处**：在计算持有股票的状态时，把 $\textit{dfs}(i-1,0)$ 改成 $\textit{dfs}(i-2,0)$。道理和 [198. 打家劫舍](https://leetcode.cn/problems/house-robber/) 是一样的，因为第 $i$ 天买股票的话第 $i-1$ 天不能卖，只能从第 $i-2$ 天没有股票的状态转移过来。注意 $\textit{dfs}(i-2,0)$ 并不意味着第 $i-2$ 天一定卖了股票，而是在没有股票下的最优状态。

请注意，这会导致边界条件多了一个 $\textit{dfs}(-2,0)=0$，后面空间优化中的 $\textit{pre}_0$ 指的就是这个状态。

请注意，$\textit{dfs}(-2,1)$ 是访问不到的，所以下面翻译成递推时，无需初始化这个状态（不需要写 $f[0][1]=-\infty$）。

* [sol-Python3]

```py
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        n = len(prices)
        @cache
        def dfs(i: int, hold: bool) -> int:
            if i < 0:
                return -inf if hold else 0
            if hold:
                return max(dfs(i - 1, True), dfs(i - 2, False) - prices[i])
            return max(dfs(i - 1, False), dfs(i - 1, True) + prices[i])
        return dfs(n - 1, False)
```

* [sol-Java]

```java
class Solution {
    private int[] prices;
    private int[][] memo;

    public int maxProfit(int[] prices) {
        this.prices = prices;
        int n = prices.length;
        memo = new int[n][2];
        for (int[] row : memo) {
            Arrays.fill(row, -1); // -1 表示还没有计算过
        }
        return dfs(n - 1, 0);
    }

    private int dfs(int i, int hold) {
        if (i < 0) {
            return hold == 1 ? Integer.MIN_VALUE : 0;
        }
        if (memo[i][hold] != -1) { // 之前计算过
            return memo[i][hold];
        }
        if (hold == 1) {
            return memo[i][hold] = Math.max(dfs(i - 1, 1), dfs(i - 2, 0) - prices[i]);
        }
        return memo[i][hold] = Math.max(dfs(i - 1, 0), dfs(i - 1, 1) + prices[i]);
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        vector<array<int, 2>> memo(n, {-1, -1}); // -1 表示还没有计算过
        auto dfs = [&](auto&& dfs, int i, bool hold) -> int {
            if (i < 0) {
                return hold ? INT_MIN : 0;
            }
            int& res = memo[i][hold]; // 注意这里是引用
            if (res != -1) { // 之前计算过
                return res;
            }
            if (hold) {
                return res = max(dfs(dfs, i - 1, true), dfs(dfs, i - 2, false) - prices[i]);
            }
            return res = max(dfs(dfs, i - 1, false), dfs(dfs, i - 1, true) + prices[i]);
        };
        return dfs(dfs, n - 1, false);
    }
};
```

* [sol-Go]

```go
func maxProfit(prices []int) int {
    n := len(prices)
    memo := make([][2]int, n)
    for i := range memo {
        memo[i] = [2]int{-1, -1} // -1 表示还没有计算过
    }
    var dfs func(int, int) int
    dfs = func(i, hold int) (res int) {
        if i < 0 {
            if hold == 1 {
                return math.MinInt
            }
            return
        }
        p := &memo[i][hold]
        if *p != -1 { // 之前计算过
            return *p
        }
        defer func() { *p = res }() // 记忆化
        if hold == 1 {
            return max(dfs(i-1, 1), dfs(i-2, 0)-prices[i])
        }
        return max(dfs(i-1, 0), dfs(i-1, 1)+prices[i])
    }
    return dfs(n-1, 0)
}
```

* [sol-JavaScript]

```js
var maxProfit = function(prices) {
    const n = prices.length;
    const memo = Array(n).fill(null).map(() => [-1, -1]); // -1 表示没有计算过
    function dfs(i, hold) {
        if (i < 0) {
            return hold ? -Infinity : 0;
        }
        if (memo[i][hold] !== -1) { // 之前计算过
            return memo[i][hold];
        }
        let res;
        if (hold) {
            res = Math.max(dfs(i - 1, 1), dfs(i - 2, 0) - prices[i]);
        } else {
            res = Math.max(dfs(i - 1, 0), dfs(i - 1, 1) + prices[i]);
        }
        return memo[i][hold] = res; // 记忆化
    }
    return dfs(n - 1, 0);
};
```

* [sol-Rust]

```rust
impl Solution {
    pub fn max_profit(prices: Vec<i32>) -> i32 {
        let n = prices.len();
        let mut memo = vec![vec![-1; 2]; n]; // -1 表示还没有计算过
        fn dfs(idx: i32, hold: bool, prices: &Vec<i32>, memo: &mut Vec<Vec<i32>>) -> i32 {
            if idx < 0 {
                return if hold { i32::MIN } else { 0 };
            }
            let i = idx as usize;
            let j = hold as usize;
            if memo[i][j] != -1 { // 之前计算过
                return memo[i][j];
            }
            if hold {
                memo[i][j] = dfs(idx - 1, true, prices, memo).max(dfs(idx - 2, false, prices, memo) - prices[i]);
            } else {
                memo[i][j] = dfs(idx - 1, false, prices, memo).max(dfs(idx - 1, true, prices, memo) + prices[i]);
            }
            memo[i][j]
        }
        dfs(n as i32 - 1, false, &prices, &mut memo)
    }
}
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(n)$，其中 $n$ 为 $\textit{prices}$ 的长度。
- 空间复杂度：$\mathcal{O}(n)$。

## 二、1:1 翻译成递推

* [sol-Python3]

```py
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        n = len(prices)
        f = [[0] * 2 for _ in range(n + 2)]
        f[1][1] = -inf
        for i, p in enumerate(prices):
            f[i + 2][0] = max(f[i + 1][0], f[i + 1][1] + p)
            f[i + 2][1] = max(f[i + 1][1], f[i][0] - p)
        return f[-1][0]
```

* [sol-Java]

```java
class Solution {
    public int maxProfit(int[] prices) {
        int n = prices.length;
        int[][] f = new int[n + 2][2];
        f[1][1] = Integer.MIN_VALUE;
        for (int i = 0; i < n; i++) {
            f[i + 2][0] = Math.max(f[i + 1][0], f[i + 1][1] + prices[i]);
            f[i + 2][1] = Math.max(f[i + 1][1], f[i][0] - prices[i]);
        }
        return f[n + 1][0];
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        vector<array<int, 2>> f(n + 2);
        f[1][1] = INT_MIN;
        for (int i = 0; i < n; i++) {
            f[i + 2][0] = max(f[i + 1][0], f[i + 1][1] + prices[i]);
            f[i + 2][1] = max(f[i + 1][1], f[i][0] - prices[i]);
        }
        return f[n + 1][0];
    }
};
```

* [sol-Go]

```go
func maxProfit(prices []int) int {
    n := len(prices)
    f := make([][2]int, n+2)
    f[1][1] = math.MinInt
    for i, p := range prices {
        f[i+2][0] = max(f[i+1][0], f[i+1][1]+p)
        f[i+2][1] = max(f[i+1][1], f[i][0]-p)
    }
    return f[n+1][0]
}
```

* [sol-JavaScript]

```js
var maxProfit = function(prices) {
    const n = prices.length;
    const f = Array(n + 2).fill(null).map(() => [0, 0]);
    f[1][1] = -Infinity;
    for (let i = 0; i < n; i++) {
        f[i + 2][0] = Math.max(f[i + 1][0], f[i + 1][1] + prices[i]);
        f[i + 2][1] = Math.max(f[i + 1][1], f[i][0] - prices[i]);
    }
    return f[n + 1][0];
};
```

* [sol-Rust]

```rust
impl Solution {
    pub fn max_profit(prices: Vec<i32>) -> i32 {
        let n = prices.len();
        let mut f = vec![(0, 0); n + 2];
        f[1].1 = i32::MIN;
        for (i, &p) in prices.iter().enumerate() {
            f[i + 2].0 = f[i + 1].0.max(f[i + 1].1 + p);
            f[i + 2].1 = f[i + 1].1.max(f[i].0 - p);
        }
        f[n + 1].0
    }
}
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(n)$，其中 $n$ 为 $\textit{prices}$ 的长度。
- 空间复杂度：$\mathcal{O}(n)$。

## 三、空间优化

* [sol-Python3]

```py
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        pre0, f0, f1, = 0, 0, -inf
        for p in prices:
            pre0, f0, f1 = f0, max(f0, f1 + p), max(f1, pre0 - p)
        return f0
```

* [sol-Java]

```java
class Solution {
    public int maxProfit(int[] prices) {
        int pre0 = 0;
        int f0 = 0;
        int f1 = Integer.MIN_VALUE;
        for (int p : prices) {
            int newF0 = Math.max(f0, f1 + p); // f[i+2][0]
            f1 = Math.max(f1, pre0 - p); // f[i+2][1]
            pre0 = f0;
            f0 = newF0;
        }
        return f0;
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int pre0 = 0, f0 = 0, f1 = INT_MIN;
        for (int p: prices) {
            int new_f0 = max(f0, f1 + p); // f[i+2][0]
            f1 = max(f1, pre0 - p); // f[i+2][1]
            pre0 = f0;
            f0 = new_f0;
        }
        return f0;
    }
};
```

* [sol-Go]

```go
func maxProfit(prices []int) int {
    pre0, f0, f1 := 0, 0, math.MinInt
    for _, p := range prices {
        pre0, f0, f1 = f0, max(f0, f1+p), max(f1, pre0-p)
    }
    return f0
}
```

* [sol-JavaScript]

```js
var maxProfit = function(prices) {
    let pre0 = 0, f0 = 0, f1 = -Infinity;
    for (let p of prices) {
        [pre0, f0, f1] = [f0, Math.max(f0, f1 + p), Math.max(f1, pre0 - p)];
    }
    return f0;
};
```

* [sol-Rust]

```rust
impl Solution {
    pub fn max_profit(prices: Vec<i32>) -> i32 {
        let mut pre0 = 0;
        let mut f0 = 0;
        let mut f1 = i32::MIN;
        for p in prices {
            let new_f0 = f0.max(f1 + p); // f[i+2][0]
            f1 = f1.max(pre0 - p); // f[i+2][1]
            pre0 = f0;
            f0 = new_f0;
        }
        f0
    }
}
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(n)$，其中 $n$ 为 $\textit{prices}$ 的长度。
- 空间复杂度：$\mathcal{O}(1)$。仅用到若干额外变量。

## 股票买卖系列题目

- [121. 买卖股票的最佳时机](https://leetcode.cn/problems/best-time-to-buy-and-sell-stock/)
- [122. 买卖股票的最佳时机 II](https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/)
- [123. 买卖股票的最佳时机 III](https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-iii/)
- [188. 买卖股票的最佳时机 IV](https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-iv/)
- [309. 买卖股票的最佳时机含冷冻期](https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-with-cooldown/)
- [714. 买卖股票的最佳时机含手续费](https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/)

## 分类题单

[如何科学刷题？](https://leetcode.cn/circle/discuss/RvFUtj/)

1. [滑动窗口（定长/不定长/多指针）](https://leetcode.cn/circle/discuss/0viNMK/)
2. [二分算法（二分答案/最小化最大值/最大化最小值/第K小）](https://leetcode.cn/circle/discuss/SqopEo/)
3. [单调栈（基础/矩形面积/贡献法/最小字典序）](https://leetcode.cn/circle/discuss/9oZFK9/)
4. [网格图（DFS/BFS/综合应用）](https://leetcode.cn/circle/discuss/YiXPXW/)
5. [位运算（基础/性质/拆位/试填/恒等式/思维）](https://leetcode.cn/circle/discuss/dHn9Vk/)
6. [图论算法（DFS/BFS/拓扑排序/最短路/最小生成树/二分图/基环树/欧拉路径）](https://leetcode.cn/circle/discuss/01LUak/)
7. [动态规划（入门/背包/状态机/划分/区间/状压/数位/数据结构优化/树形/博弈/概率期望）](https://leetcode.cn/circle/discuss/tXLS3i/)
8. [常用数据结构（前缀和/差分/栈/队列/堆/字典树/并查集/树状数组/线段树）](https://leetcode.cn/circle/discuss/mOr1u6/)
9. [数学算法（数论/组合/概率期望/博弈/计算几何/随机算法）](https://leetcode.cn/circle/discuss/IYT3ss/)
10. [贪心算法（基本贪心策略/反悔/区间/字典序/数学/思维/脑筋急转弯/构造）](https://leetcode.cn/circle/discuss/g6KTKL/)
11. [链表、二叉树与一般树（前后指针/快慢指针/DFS/BFS/直径/LCA）](https://leetcode.cn/circle/discuss/K0n2gO/)

[我的题解精选（已分类）](https://github.com/EndlessCheng/codeforces-go/blob/master/leetcode/SOLUTIONS.md)

欢迎关注 [B站@灵茶山艾府](https://space.bilibili.com/206214)
