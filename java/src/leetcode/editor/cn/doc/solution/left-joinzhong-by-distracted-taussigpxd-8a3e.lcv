### 解题思路

本题目使用left join，以seller表作为左表，orders表作为右表进行关联，右表的筛选条件有两个：
***第一个***：`year(o.sale_date) = '2020'`  这个条件的目的是为了筛选出2020年的数据，对于2020年没有卖出的数据（例如本题目的frank），反而是需要保留下来的（填充为null即可），所以这个条件应该放在on中，而不应该放在where中
放在on中的效果是这样的：
`select *
from seller s left join orders o on s.seller_id=o.seller_id
and year(o.sale_date) = '2020';`
![image.png](https://pic.leetcode-cn.com/1664719685-RvOZJQ-image.png)
而放在where中的效果是这样的：
`select *
from seller s left join orders o on s.seller_id=o.seller_id
where year(o.sale_date) = '2020';`
![image.png](https://pic.leetcode-cn.com/1664719797-poFZtM-image.png)
那么放在on中，是怎样执行的呢？
首先，左表和右表进行关联以后，留下的数据是这样的：
![image.png](https://pic.leetcode-cn.com/1664720433-HuCDOv-image.png)
然后，添加了这个条件 `year(o.sale_date) = '2020'`，此时不满足该条件的数据首先过滤掉，例如这一条会被过滤掉
![image.png](https://pic.leetcode-cn.com/1664720546-cyCvDZ-image.png)
为什么这一条不会过滤掉？
![image.png](https://pic.leetcode-cn.com/1664720570-xiWdPq-image.png)
是因为在on中，左表的内容不会被修改，即使这个条件不成立，只会填充为null而不会被过滤
***第二个***：
那么对于第二个筛选条件 `o.seller_id is null`，在第一个筛选条件的基础之上，应该使用where而不是on，使用on的效果如下：
`select *
from seller s left join orders o on s.seller_id=o.seller_id and year(o.sale_date) = '2020'
and o.seller_id is null;`
![image.png](https://pic.leetcode-cn.com/1664720745-hebhBV-image.png)
为什么？是因为在on之中，即使第二条这个条件不能成立，左表的内容不会被修改，仍然会保留有着三个名字，反而不能满足我们的需求
所以第二个条件这里应该使用where，效果是这样的
`select *
from seller s left join orders o on s.seller_id=o.seller_id and year(o.sale_date) = '2020'
where o.seller_id is null;`
![image.png](https://pic.leetcode-cn.com/1664720879-RCFUZP-image.png)

**不知道是否能够帮助到你，欢迎评论区交流**

### 代码

* mysql

```mysql
select
    s.seller_name
from
    seller s left join orders o on s.seller_id=o.seller_id and year(o.sale_date) = '2020'    
where
    o.seller_id is null
order by
    s.seller_name
```

