**前置题目**：请先完成前缀和模板题 [303. 区域和检索 - 数组不可变](https://leetcode.cn/problems/range-sum-query-immutable/)，我的题解：[前缀和及其扩展，附题单！](https://leetcode.cn/problems/range-sum-query-immutable/solution/qian-zhui-he-ji-qi-kuo-zhan-fu-ti-dan-py-vaar/)

回顾一下 303 前缀和的定义：$s[0]=0,\ s[i+1] = \textit{nums}[0] + \textit{nums}[1] + \cdots + \textit{nums}[i]$。

下标从 $i$ 到 $j-1$ 的非空连续子数组的元素和等于 $k$，即

$$
s[j] - s[i] = k\ (i<j)
$$

这个式子和 [1. 两数之和](https://leetcode.cn/problems/two-sum/) 是类似的，请看[【动画】从两数之和中，我们可以学到什么？](https://leetcode.cn/problems/two-sum/solution/dong-hua-cong-liang-shu-zhi-he-zhong-wo-0yvmj/)

枚举 $j$，上式变成

$$
s[i] = s[j] - k
$$

根据上式，计算 $s[i]$ 的个数，等价于计算 $s[j] - k$ 的个数。

这可以在遍历 $s[j]$ 的同时，用一个哈希表 $\textit{cnt}$ 统计 $s[j]$ 的个数。那么枚举到 $s[j]$ 时，从哈希表中就可以找到有 $\textit{cnt}[s[j] - k]$ 个 $s[i]$，即为元素和等于 $k$ 的子数组个数，加入答案。

以 $\textit{nums}=[1,1,-1,1,-1],\ k=1$ 为例，其前缀和 $s=[0,1,2,1,2,1]$。

|  $j$ | $s[j]$  | $s[j]-k$  | 子数组个数 |
|---|---|---|---|
| $0$  | $0$  | $-1$  |  $0$ |
| $1$  | $1$  | $0$  |  $1$  |
| $2$  | $2$  | $1$  |  $1$ |
| $3$  | $1$  | $0$  |  $1$ |
| $4$  | $2$  | $1$  |  $2$ |
| $5$  | $1$  | $0$  |  $1$ |

每次寻找 $s[j]$ 前面有多少个前缀和等于 $s[j]-k$，即上表最右边一列的子数组个数。用哈希表记录前缀和的个数，就能 $\mathcal{O}(1)$ 算出前面有多少个 $s[j]-k$。

总计有 $0+1+1+1+2+1=6$ 个和为 $k=1$ 的子数组。

### 答疑

**问**：为什么要把 $s[0]=0$ 也加到哈希表中？

**答**：举个最简单的例子，$\textit{nums}=[1],\ k=1$。如果不把 $s[0]=0$ 加到哈希表中，按照我们的算法，没法算出这里有 $1$ 个符合要求的子数组。也可以这样理解，要想把任意子数组都表示成两个前缀和的差，必须添加 $s[0]=0$，否则当子数组是前缀时，没法减去一个数，具体见 [前缀和及其扩展](https://leetcode.cn/problems/range-sum-query-immutable/solution/qian-zhui-he-ji-qi-kuo-zhan-fu-ti-dan-py-vaar/) 中的讲解。

**问**：为什么代码中要先更新 $\textit{ans}$，再更新 $\textit{cnt}$？这两行代码能否交换一下？

**答**：不行，这会在 $k=0$ 的时候算错。例如 $\textit{nums}=[2],\ k=0$，正确答案应该是 $0$，但如果先把 $\textit{cnt}[2]$ 加一，再把 $\textit{cnt}[2]$ 加到 $\textit{ans}$ 中，最后返回的 $\textit{ans}$ 就不是 $0$ 了。

**问**：为什么这题不适合用**滑动窗口**做？

**答**：滑动窗口需要满足**单调性**，当右端点元素进入窗口时，窗口元素和是不能减少的。本题 $\textit{nums}$ 包含**负数**，当负数进入窗口时，窗口左端点反而要向左移动，导致算法复杂度不是线性的。

### 写法一：两次遍历

* [sol-Python3]

```py
class Solution:
    def subarraySum(self, nums: List[int], k: int) -> int:
        s = [0] * (len(nums) + 1)
        for i, x in enumerate(nums):
            s[i + 1] = s[i] + x

        ans = 0
        cnt = defaultdict(int)
        for sj in s:
            ans += cnt[sj - k]
            cnt[sj] += 1
        return ans
```

* [sol-Java]

```java
class Solution {
    public int subarraySum(int[] nums, int k) {
        int n = nums.length;
        int[] s = new int[n + 1];
        for (int i = 0; i < n; i++) {
            s[i + 1] = s[i] + nums[i];
        }

        int ans = 0;
        Map<Integer, Integer> cnt = new HashMap<>(n + 1); // 设置容量可以快 2ms
        for (int sj : s) {
            ans += cnt.getOrDefault(sj - k, 0);
            cnt.merge(sj, 1, Integer::sum); // cnt[sj]++
        }
        return ans;
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        int n = nums.size();
        vector<int> s(n + 1);
        for (int i = 0; i < n; i++) {
            s[i + 1] = s[i] + nums[i];
        }

        int ans = 0;
        unordered_map<int, int> cnt;
        for (int sj : s) {
            // 注意不要直接 += cnt[sj-k]，如果 sj-k 不存在，会插入 sj-k
            ans += cnt.contains(sj - k) ? cnt[sj - k] : 0;
            cnt[sj]++;
        }
        return ans;
    }
};
```

* [sol-Go]

```go
func subarraySum(nums []int, k int) (ans int) {
    s := make([]int, len(nums)+1)
    for i, x := range nums {
        s[i+1] = s[i] + x
    }

    cnt := map[int]int{}
    for _, sj := range s {
        ans += cnt[sj-k]
        cnt[sj]++
    }
    return
}
```

* [sol-JavaScript]

```js
var subarraySum = function(nums, k) {
    const n = nums.length;
    const s = Array(n + 1).fill(0);
    for (let i = 0; i < n; i++) {
        s[i + 1] = s[i] + nums[i];
    }

    let ans = 0;
    const cnt = new Map();
    for (const sj of s) {
        ans += cnt.get(sj - k) ?? 0;
        cnt.set(sj, (cnt.get(sj) ?? 0) + 1);
    }
    return ans;
};
```

* [sol-Rust]

```rust
use std::collections::HashMap;

impl Solution {
    pub fn subarray_sum(nums: Vec<i32>, k: i32) -> i32 {
        let mut s = vec![0; nums.len() + 1];
        for (i, &x) in nums.iter().enumerate() {
            s[i + 1] = s[i] + x;
        }

        let mut ans = 0;
        let mut cnt = HashMap::with_capacity(s.len());
        for sj in s {
            if let Some(&c) = cnt.get(&(sj - k)) {
                ans += c;
            }
            *cnt.entry(sj).or_insert(0) += 1;
        }
        return ans;
    }
}
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(n)$，其中 $n$ 为 $\textit{nums}$ 的长度。
- 空间复杂度：$\mathcal{O}(n)$。

### 写法二：一次遍历

我们可以一边计算前缀和，一边遍历前缀和。

由于遍历 $\textit{nums}$ 会从 $s[1]$ 开始计算，所以要**单独处理** $s[0]=0$，也就是往 $\textit{cnt}$ 中添加 $\textit{cnt}[0]=1$。

* [sol-Python3]

```py
class Solution:
    def subarraySum(self, nums: List[int], k: int) -> int:
        ans = s = 0
        cnt = defaultdict(int)
        cnt[0] = 1  # s[0]=0 单独统计
        for x in nums:
            s += x
            ans += cnt[s - k]
            cnt[s] += 1
        return ans
```

* [sol-Java]

```java
class Solution {
    public int subarraySum(int[] nums, int k) {
        int ans = 0;
        int s = 0;
        Map<Integer, Integer> cnt = new HashMap<>(nums.length + 1); // 设置容量可以快 2ms
        cnt.put(0, 1); // s[0]=0 单独统计
        for (int x : nums) {
            s += x;
            ans += cnt.getOrDefault(s - k, 0);
            cnt.merge(s, 1, Integer::sum); // cnt[s]++
        }
        return ans;
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        int ans = 0, s = 0;
        unordered_map<int, int> cnt{{0, 1}}; // s[0]=0 单独统计
        for (int x : nums) {
            s += x;
            // 注意不要直接 += cnt[s-k]，如果 s-k 不存在，会插入 s-k
            ans += cnt.contains(s - k) ? cnt[s - k] : 0;
            cnt[s]++;
        }
        return ans;
    }
};
```

* [sol-Go]

```go
func subarraySum(nums []int, k int) (ans int) {
    s := 0
    cnt := map[int]int{0: 1} // s[0]=0 单独统计
    for _, x := range nums {
        s += x
        ans += cnt[s-k]
        cnt[s]++
    }
    return
}
```

* [sol-JavaScript]

```js
var subarraySum = function(nums, k) {
    let ans = 0, s = 0;
    const cnt = new Map();
    cnt.set(0, 1); // s[0]=0 单独统计
    for (const x of nums) {
        s += x;
        ans += cnt.get(s - k) ?? 0;
        cnt.set(s, (cnt.get(s) ?? 0) + 1);
    }
    return ans;
};
```

* [sol-Rust]

```rust
use std::collections::HashMap;

impl Solution {
    pub fn subarray_sum(nums: Vec<i32>, k: i32) -> i32 {
        let mut ans = 0;
        let mut s = 0;
        let mut cnt = HashMap::with_capacity(nums.len() + 1);
        cnt.insert(0, 1); // s[0]=0 单独统计
        for x in nums {
            s += x;
            if let Some(&c) = cnt.get(&(s - k)) {
                ans += c;
            }
            *cnt.entry(s).or_insert(0) += 1;
        }
        return ans;
    }
}
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(n)$，其中 $n$ 为 $\textit{nums}$ 的长度。
- 空间复杂度：$\mathcal{O}(m)$，其中 $m$ 为 $s$ 中的不同元素个数。如果像 Java 那样设置了哈希表的容量，则空间复杂度为 $\mathcal{O}(n)$。

### 变形题

1. 改成计算元素和等于 $k$ 的**最短**子数组，要怎么做？
2. 改成计算元素和等于 $k$ 的**最长**子数组，要怎么做？
3. 改成计算元素和等于 $k$ 的**所有子数组的长度之和**，要怎么做？
4. 改成元素和**至多**为 $k$，要怎么做？见 [363. 矩形区域不超过 K 的最大数值和](https://leetcode.cn/problems/max-sum-of-rectangle-no-larger-than-k/)。

欢迎在评论区分享你的思路/代码。

> 提示：思考题 4 可以枚举上下边界，转成一维数组。

## 分类题单

[如何科学刷题？](https://leetcode.cn/circle/discuss/RvFUtj/)

1. [滑动窗口（定长/不定长/多指针）](https://leetcode.cn/circle/discuss/0viNMK/)
2. [二分算法（二分答案/最小化最大值/最大化最小值/第K小）](https://leetcode.cn/circle/discuss/SqopEo/)
3. [单调栈（基础/矩形面积/贡献法/最小字典序）](https://leetcode.cn/circle/discuss/9oZFK9/)
4. [网格图（DFS/BFS/综合应用）](https://leetcode.cn/circle/discuss/YiXPXW/)
5. [位运算（基础/性质/拆位/试填/恒等式/思维）](https://leetcode.cn/circle/discuss/dHn9Vk/)
6. [图论算法（DFS/BFS/拓扑排序/最短路/最小生成树/二分图/基环树/欧拉路径）](https://leetcode.cn/circle/discuss/01LUak/)
7. [动态规划（入门/背包/状态机/划分/区间/状压/数位/数据结构优化/树形/博弈/概率期望）](https://leetcode.cn/circle/discuss/tXLS3i/)
8. [常用数据结构（前缀和/差分/栈/队列/堆/字典树/并查集/树状数组/线段树）](https://leetcode.cn/circle/discuss/mOr1u6/)
9. [数学算法（数论/组合/概率期望/博弈/计算几何/随机算法）](https://leetcode.cn/circle/discuss/IYT3ss/)
10. [贪心算法（基本贪心策略/反悔/区间/字典序/数学/思维/脑筋急转弯/构造）](https://leetcode.cn/circle/discuss/g6KTKL/)
11. [链表、二叉树与一般树（前后指针/快慢指针/DFS/BFS/直径/LCA）](https://leetcode.cn/circle/discuss/K0n2gO/)

[我的题解精选（已分类）](https://github.com/EndlessCheng/codeforces-go/blob/master/leetcode/SOLUTIONS.md)

欢迎关注 [B站@灵茶山艾府](https://space.bilibili.com/206214)
