### 题目描述：

给定单链表的头结点head，判断是否为回文链表，如果是，返回true。

#### 思路推导

判断该链表是否为回文链表，数据范围$node.val <= 9, 节点数量 ∈ [1,10^5]$
- 可选方案1：转数字，判断是否为回文数
- 可选方案2：转字符串，判断是否为回文串

但这样做就没有利用到链表自身的性质，因此不是最合适的解法。
根据「206.反转链表」的思路，可以在完成「链表前半部分的反转」之后，通过双指针指向前半部分的头结点和后半部分链表的头结点，每次推进一步并判断数值是否相等。
但这存在「奇数节点个数的链表」和「偶数节点个数的链表」的前半部分和后半部分划分上的不同的问题。
**情况分析**
回文链表必然会存在「奇数个节点」的链表和「偶数个节点」的链表。

对于长度为奇数的回文链表
`1->2->3->2->1`，长度为5的链表，那么从回文中心`3`向左右两侧出发，会遍历得到相同的数字序列。
对于偶数长度的回文链表：
`1->2->2->1`，长度为4的链表，如果回文，那么从第`2`和第`3`个节点出发，向两侧扫描，可以得到相同的数字序列。
因此，假设节点个数为`n`
- 奇数链表：

  - 回文中心为：`(n+1)/2`个节点
  - 回文边界为：`(n+1)/2 - 1`，`(n+1)/2 + 1`
- 偶数链表：
  - 没有回文中心
  - 回文边界：`n/2`和`n/2 + 1`

之后可以通过「统计节点个数」->「对奇偶链表需要翻转的节点个数分别判断完成前半部分反转」->「从前半部分链表和后半部分链表的头结点向两侧扫描推进判断数字是否相同」的方法来判断回文链表。

但目前这样的考虑过于复杂了，因为实际上我们无需计算节点个数，只需要**确定链表中间节点的位置**即可。「确定链表中间节点的位置」的方法通常使用**快慢指针法**。

**示例分析**
设计双指针`slow = head, fast = head`
「奇数链表」和「偶数链表」最终确定的中间节点不一致，我们可以先确定「链表中间节点位置」，再「反转前半部分的链表」；也可以考虑在**slow指针推进过程中完成「局部反转」，这样到达「中间位置节点」时恰好完成了前半部分的反转**。
- 偶数链表的示例分析：

* java

```java
局部翻转还需要的变量pre以及变量初始化：
设计pre = null, slow = fast = head;
当前循环条件未知。
每次循环，slow指针每次前进一步，就翻转局部链表，fast指针前进两步。
偶数节点情况：
初始化：
null 1 -> 2 -> 2 -> 1 -> null
 ^   ^
pre slow,fast
---------------------------------
第1轮循环
null<- 1   2 ->  2 -> 1 -> null
	   ^   ^ 	 ^
	  pre  slow fast
---------------------------------
第2轮循环：
null<- 1 <- 2   2-> 1-> null
			^	^		 ^
		   pre  slow 	fast
第二次循环结束后，就已经完成了前半部分链表的反转，
pre指向前半部分链表的第一个元素。
slow到达「中间节点的第二个节点」。
slow指针指向后半部分链表的第一个元素。
偶数链表的循环退出条件是 fast == null
```

- 奇数链表的示例分析：

* java

```java
奇数链表模拟：
初始化
null 1 -> 2 -> 3 -> 2 -> 1 -> null
 ^   ^
pre  slow,fast
第一轮循环
null<- 1	2 -> 3 -> 2 -> 1 -> null
	   ^    ^	 ^
	  pre  slow fast
	  
第二轮循环：
null<- 1 <- 2 	3 -> 2 -> 1 -> null
		   	^	^		  ^
		   pre slow		fast
第二轮循环结束后，slow到达「链表中间节点」位置。
循环退出条件是 fast.next == null 
循环退出时
fast = 链表最后一个元素
pre 指向前部分链表的第一个元素
slow 指针指向后部分链表的第一个元素。
需要特殊处理：即将slow指针向后推进一位，
以保证和「偶数链表」相同，slow指针指向后半部分回文链表的第一个元素。
```

- 抽取循环结束时的共性：
  - pre指向前半部分链表的第一个元素。
  - slow指针经过处理后，指向后半部分链表的首个元素
  - 循环退出条件：
    - 对于奇数链表为`fast.next == null`
    - 对于偶数链表为`fast==null`
- 通过「奇数链表」和「偶数链表」的示例分析得到伪代码：

* 

```
循环开始：
1. 变量初始化 
双指针赋值slow = head, fast = head, 
局部旋转前一个变量指针pre = null
局部翻转需要保存的下一个节点 tmp = null 
2. 双指针推进循环
循环条件(fast != null && fast.next != null){
    2.1 快指针每次推进两步。
    2.2 慢指针通过「局部反转」的方式进行指针的推进。
}
3.循环结束后的情况分析：
    3.1 偶数链表循环结束后，fast == null，
        pre指向前半部分第一个回文数
        slow指向后半部分第一个回文数
    3.2 奇数链表循环结束后，
        fast !=null, fast.next == null
        pre指向前半部分第一个回文数
        slow指向后半部分第一个节点（链表中间节点）。
        为使得一致，slow指针需要指向第一个回文数
        需要将slow向前推进一步
因此，如果fast != null，将slow指针推进一步。
4. 此时pre指向前半部分链表第一个回文数，slow指向后半部分链表第一个回文数。
循环判断：
循环条件：pre!= null || slow.next != null
向两边同时推进pre和slow，比较pre.val和slow.val是否相等，
如果pre.val != slow.val，说明不是回文数，返回false。
当pre和slow都推进到链表末尾，说明每个数都相等，返回true。
```

**代码实现**:

* java

```java
// 快慢指针解法
class Solution{
    public boolean isPalindrome(ListNode head) {
        if(head == null || head.next == null) return false;
        ListNode pre = null;
        ListNode slow = head, fast = head;
        while(fast != null && fast.next != null){
            // 快指针每次前进两步
            fast = fast.next.next;
            // 每次循环将局部链表反转
            ListNode tmp = slow.next;
            slow.next = pre;
            pre = slow;
            slow = tmp;
        }
        // 1.偶数链表循环结束后，fast == null，
        // pre指向前半部分第一个回文数，slow指向后半部分第一个回文数
        // 2. 奇数链表循环结束后，fast !=null, fast.next == null
        // pre指向前半部分第一个回文数，slow指向后半部分第一个链表。
        // 要将slow向前推进一步
        if(fast != null) slow = slow.next;
        // 此时pre指向前半部分第一个回文数，slow指向后半部分第一个回文数
        while (pre != null || slow != null){
            if(pre.val != slow.val) return false;
            pre = pre.next;
            slow = slow.next;
        }
        return true;
    }
}

```

**复杂度分析**：
- 时间复杂度：$O(n)$，双指针扫描链表一遍$O(n)$，完成局部反转时间复杂度$O(1)$，回文数比较时间复杂度$O(n)$。
- 空间复杂度：$O(1)$，指针只占用了常量的空间。

#### 优化：还原链表

我们可以将链表前半部分反转实际上**修改了链表结构**，在「将前半部分和后半部分比较」之后，我们希望比较完成后我们应该**将链表恢复原样**。使用该函数的人通常不希望链表结构被更改。

我们需要将前半部分链表反转回去，可以考虑到方法是在**比较的过程中，pre指针遍历时完成链表的局部反转**。

* 

```
1. 偶数链表开始比较之前的状态：
null<- 1 <- 2   2-> 1-> null
			^	^		 ^
		   pre  slow 	fast
                tmp

2. 奇数链表开始比较之前的状态：
null<- 1 <- 2 	3 -> 2 -> 1 -> null
		   	^	^	 ^	  ^
		   pre  tmp	slow fast

```

具体做法：
1. 要进行「恢复链表」的反转操作，首先要知道「上一个节点」的位置。初始时，上一个节点的位置就是「后半部分链表的头节点位置」，即`tmp`变量的位置。
2. 由于奇数链表为了指向第一个回文数，执行了`slow=slow.next`，`slow`指针不一定在后半部分头节点位置，但`tmp`变量仍然指向「后半部分链表头节点」，因此将`tmp`变量需要作为全局变量保存。
3. 之后进行反转操作，设计临时变量`next`保存下一个节点`pre.next`，修改`pre.next`指针指向`tmp`，循环更新`tmp=pre`，`pre=next`，向前推进每轮循环完成一次「局部反转（局部恢复）」。
4. 注意此时**要将`pre`推进完链表前半部分**，因此设计变量`isPalindorme`保存是否是回文链表的判断，**在`pre`推进完成链表前半部分的还原之后才可以返回结果**。

* java

```java
// 快慢指针解法还原链表方法
class Solution {
    public boolean isPalindrome(ListNode head) {
        if(head == null || head.next == null) return true;
        ListNode pre = null;
        ListNode slow = head, fast = head;
        ListNode tmp = null;
        while(fast != null && fast.next != null){
            fast = fast.next.next;
            // 每次循环将局部链表反转
            tmp = slow.next;
            slow.next = pre;
            pre = slow;
            slow = tmp;
        }
        // tmp停留在中间节点
        if(fast != null) slow = slow.next;
        // 此时pre指向前半部分第一个回文数，slow指向后半部分第一个回文数

        // 此时需要对pre链表进行反转的还原，即对前半部分再次进行反转。
        // 因此要遍历完前半部分的全部部分，不能够遇到不相等就退出
        // 设计变量保存回文判断结果
        boolean isPalindrome = true;
        while (pre != null){
            if(pre.val != slow.val) isPalindrome = false;
            slow = slow.next;
            // 以pre为起点，将链表反转回去
            // 缓存pre的下一个节点
            ListNode next = pre.next;
            // 还原pre.next指向它的上一个节点tmp
            pre.next = tmp; 
            // 推进pre,tmp指针
            tmp = pre;
            pre = next;
        }
        return isPalindrome;
    }
}

```

**复杂度分析**：
- 时间复杂度：$O(n)$，双指针扫描链表一遍$O(n)$，局部反转时间复杂度$O(1)$，回文数比较时间复杂度$O(n)$。
- 空间复杂度：$O(1)$，指针只占用了常量的空间。

