利用异或运算 $a\oplus a = 0$ 的性质，我们可以用异或来「消除」所有出现了两次的元素，最后剩下的一定是只出现一次的元素。

例如 $\textit{nums}=[4,1,2,1,2]$，把所有元素异或：

$$
\begin{aligned}
&4\oplus 1\oplus 2\oplus 1\oplus 2\\
=\ &4\oplus (1\oplus 1)\oplus(2\oplus 2)\\
=\ &4\oplus 0 \oplus 0\\
=\ &4
\end{aligned}
$$

其中用到了异或的交换律，即 $(a\oplus b) \oplus c  = a\oplus (b\oplus c)$（类比加法）。

代码中，初始化 `ans = 0` 是因为 $0\oplus a = a$，相当于我们从第一个数开始，和其它数异或。

* [sol-Python3]

```py
class Solution:
    def singleNumber(self, nums: List[int]) -> int:
        return reduce(xor, nums)
```

* [sol-Java]

```java
class Solution {
    public int singleNumber(int[] nums) {
        int ans = 0;
        for (int x : nums) {
            ans ^= x;
        }
        return ans;
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    int singleNumber(vector<int>& nums) {
        int ans = 0;
        for (int x : nums) {
            ans ^= x;
        }
        return ans;
    }
};
```

* [sol-Go]

```go
func singleNumber(nums []int) (ans int) {
    for _, x := range nums {
        ans ^= x
    }
    return
}
```

* [sol-JavaScript]

```js
var singleNumber = function(nums) {
    let ans = 0;
    for (const x of nums) {
        ans ^= x;
    }
    return ans;
};
```

* [sol-Rust]

```rust
impl Solution {
    pub fn single_number(nums: Vec<i32>) -> i32 {
        nums.iter().fold(0, |xor, &x| xor ^ x)
    }
}
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(n)$，其中 $n$ 为 $\textit{nums}$ 的长度。
- 空间复杂度：$\mathcal{O}(1)$。

## 题单：XOR

- [1720. 解码异或后的数组](https://leetcode.cn/problems/decode-xored-array/)
- [2433. 找出前缀异或的原始数组](https://leetcode.cn/problems/find-the-original-array-of-prefix-xor/)
- [1310. 子数组异或查询](https://leetcode.cn/problems/xor-queries-of-a-subarray/)
- [2683. 相邻值的按位异或](https://leetcode.cn/problems/neighboring-bitwise-xor/)
- [1829. 每个查询的最大异或值](https://leetcode.cn/problems/maximum-xor-for-each-query/)
- [1442. 形成两个异或相等数组的三元组数目](https://leetcode.cn/problems/count-triplets-that-can-form-two-arrays-of-equal-xor/)
- [2429. 最小 XOR](https://leetcode.cn/problems/minimize-xor/)
- [2527. 查询数组 Xor 美丽值](https://leetcode.cn/problems/find-xor-beauty-of-array/)
- [2425. 所有数对的异或和](https://leetcode.cn/problems/bitwise-xor-of-all-pairings/)
- [2317. 操作后的最大异或和](https://leetcode.cn/problems/maximum-xor-after-operations/)

## 分类题单

1. [滑动窗口（定长/不定长/多指针）](https://leetcode.cn/circle/discuss/0viNMK/)
2. [二分算法（二分答案/最小化最大值/最大化最小值/第K小）](https://leetcode.cn/circle/discuss/SqopEo/)
3. [单调栈（矩形系列/字典序最小/贡献法）](https://leetcode.cn/circle/discuss/9oZFK9/)
4. [网格图（DFS/BFS/综合应用）](https://leetcode.cn/circle/discuss/YiXPXW/)
5. [位运算（基础/性质/拆位/试填/恒等式/贪心/脑筋急转弯）](https://leetcode.cn/circle/discuss/dHn9Vk/)
6. [图论算法（DFS/BFS/拓扑排序/最短路/最小生成树/二分图/基环树/欧拉路径）](https://leetcode.cn/circle/discuss/01LUak/)
7. [动态规划（入门/背包/状态机/划分/区间/状压/数位/数据结构优化/树形/博弈/概率期望）](https://leetcode.cn/circle/discuss/tXLS3i/)

更多题单，点我个人主页 - 讨论发布。

欢迎关注 [B站@灵茶山艾府](https://space.bilibili.com/206214)

[往期题解精选（已分类）](https://github.com/EndlessCheng/codeforces-go/blob/master/leetcode/SOLUTIONS.md)
