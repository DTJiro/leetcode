## 视频讲解

[0-1 背包和完全背包【基础算法精讲 18】](https://www.bilibili.com/video/BV16Y411v7Y6/)

## 一、记忆化搜索

把 $1,4,9,16,\cdots$ 这些完全平方数视作物品体积，物品价值都是 $1$。由于每个数（物品）选的次数没有限制，所以本题是一道标准的**完全背包问题**。

按照视频中的做法，定义 $\textit{dfs}(i,j)$ 表示从前 $i$ 个完全平方数中选一些数（可以重复选），满足元素和**恰好**等于 $j$，最少要选的数字个数。

考虑第 $i$ 个完全平方数 $i^2$ 选或不选：

- 不选：问题变成从前 $i-1$ 个完全平方数中选一些数（可以重复选），满足元素和**恰好**等于 $j$，最少要选的数字个数，即 $\textit{dfs}(i,j) = \textit{dfs}(i-1, j)$。
- 选：前提是 $j\ge i^2$。问题变成从前 $i$ 个完全平方数中选一些数（可以重复选），满足元素和**恰好**等于 $j-i^2$，最少要选的数字个数，即 $\textit{dfs}(i,j) = \textit{dfs}(i, j-i^2) + 1$。注意这里是 $i$ 而不是 $i-1$，因为我们可以**继续选**第 $i$ 个完全平方数。

这两种情况取最小值，就得到了 $\textit{dfs}(i,j)$，即

$$
\textit{dfs}(i,j) =
\begin{cases}
\textit{dfs}(i-1, j), & j < i^2     \\
\min(\textit{dfs}(i-1, j), \textit{dfs}(i, j-i^2) + 1), & j\ge i^2      \\
\end{cases}
$$

**递归边界**：$\textit{dfs}(0,0)=0$，因为没有数可以选了，且要得到的数等于 $0$，那么答案为 $0$。如果 $j>0$，那么 $\textit{dfs}(0,j)=\infty$，这里用 $\infty$ 表示不合法的状态，从而保证上式中的 $\min$ 取到合法的状态。注意本题是一定有解的，因为 $1$ 是完全平方数。

**递归入口**：由于 $i^2 \le n$，所以 $i \le \left\lfloor\sqrt n\right\rfloor$，所以递归入口为 $\textit{dfs}(\left\lfloor\sqrt n\right\rfloor, n)$，也就是答案。

在计算 $n=7$ 的时候，如果选了 $4$，会递归到 $n=3$ 的情况。这个例子意味着**多个测试数据之间可以共享记忆化搜索的结果**。因此，把记忆化搜索的 $\textit{
memo}$ 数组声明为全局变量，这样可以在多个测试数据之间共享，从而**减少计算量**。Python 可以把 $\textit{dfs}$ 写在类外面。

* [sol-Python3]

```py
# 写在外面，多个测试数据之间可以共享，减少计算量
@cache  # 缓存装饰器，避免重复计算 dfs 的结果（记忆化）
def dfs(i: int, j: int) -> int:
    if i == 0:
        return inf if j else 0
    if j < i * i:
        return dfs(i - 1, j)  # 只能不选
    return min(dfs(i - 1, j), dfs(i, j - i * i) + 1)  # 不选 vs 选

class Solution:
    def numSquares(self, n: int) -> int:
        return dfs(isqrt(n), n)
```

* [sol-Java]

```java
class Solution {
    private static final int[][] memo = new int[101][10001];

    static {
        for (int[] row : memo) {
            Arrays.fill(row, -1); // -1 表示没有计算过
        }
    }

    private static int dfs(int i, int j) {
        if (i == 0) {
            return j == 0 ? 0 : Integer.MAX_VALUE;
        }
        if (memo[i][j] != -1) { // 之前计算过
            return memo[i][j];
        }
        if (j < i * i) {
            return memo[i][j] = dfs(i - 1, j); // 只能不选
        }
        return memo[i][j] = Math.min(dfs(i - 1, j), dfs(i, j - i * i) + 1); // 不选 vs 选
    }

    public int numSquares(int n) {
        return dfs((int) Math.sqrt(n), n);
    }
}
```

* [sol-C++]

```cpp
// 写在外面，多个测试数据之间可以共享，减少计算量
int memo[101][10001];

auto init = [] {
    memset(memo, -1, sizeof(memo)); // -1 表示没有计算过
    return 0;
}();

int dfs(int i, int j) {
    if (i == 0) {
        return j == 0 ? 0 : INT_MAX;
    }
    int& res = memo[i][j]; // 注意这里是引用
    if (res != -1) { // 之前计算过
        return res;
    }
    if (j < i * i) {
        res = dfs(i - 1, j); // 只能不选
    } else {
        res = min(dfs(i - 1, j), dfs(i, j - i * i) + 1); // 不选 vs 选
    }
    return res;
}

class Solution {
public:
    int numSquares(int n) {
        return dfs(sqrt(n), n);
    }
};
```

* [sol-Go]

```go
// 写在外面，多个测试数据之间可以共享，减少计算量
var memo [101][10001]int

func init() {
    for i := range memo {
        for j := range memo[i] {
            memo[i][j] = -1
        }
    }
}

func dfs(i, j int) int {
    if i == 0 {
        if j == 0 {
            return 0
        }
        return math.MaxInt
    }
    p := &memo[i][j]
    if *p != -1 { // 之前计算过
        return *p
    }
    if j < i*i {
        *p = dfs(i-1, j) // 只能不选
    } else {
        *p = min(dfs(i-1, j), dfs(i, j-i*i)+1) // 不选 vs 选
    }
    return *p
}

func numSquares(n int) int {
    return dfs(int(math.Sqrt(float64(n))), n)
}
```

* [sol-JavaScript]

```js
// 写在外面，多个测试数据之间可以共享，减少计算量
const memo = Array.from({ length: 101 }, () => Array(10001).fill(-1)); // -1 表示没有计算过

function dfs(i, j) {
    if (i === 0) {
        return j === 0 ? 0 : Infinity;
    }
    if (memo[i][j] !== -1) { // 之前计算过
        return memo[i][j];
    }
    if (j < i * i) {
        memo[i][j] = dfs(i - 1, j); // 只能不选
    } else {
        memo[i][j] = Math.min(dfs(i - 1, j), dfs(i, j - i * i) + 1); // 不选 vs 选
    }
    return memo[i][j];
}

const numSquares = function(n) {
    return dfs(Math.floor(Math.sqrt(n)), n);
};
```

* [sol-Rust]

```rust
// 写在外面，多个测试数据之间可以共享，减少计算量
static mut memo: [[i32; 10001]; 101] = [[-1; 10001]; 101];

unsafe fn dfs(i: usize, j: usize) -> i32 {
    if i == 0 {
        return if j == 0 { 0 } else { i32::MAX };
    }
    if memo[i][j] != -1 { // 之前计算过
        return memo[i][j];
    }
    if j < i * i {
        memo[i][j] = dfs(i - 1, j); // 只能不选
    } else {
        memo[i][j] = dfs(i - 1, j).min(dfs(i, j - i * i) + 1); // 不选 vs 选
    }
    memo[i][j]
}

impl Solution {
    pub fn num_squares(n: i32) -> i32 {
        unsafe { dfs((n as f64).sqrt() as usize, n as usize) }
    }
}
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(n\sqrt n)$。由于每个状态只会计算一次，动态规划的时间复杂度 $=$ 状态个数 $\times$ 单个状态的计算时间。本题状态个数等于 $\mathcal{O}(n\sqrt n)$，单个状态的计算时间为 $\mathcal{O}(1)$，所以动态规划的时间复杂度为 $\mathcal{O}(n\sqrt n)$。
- 空间复杂度：$\mathcal{O}(n\sqrt n)$。保存多少状态，就需要多少空间。

## 二、1:1 翻译成递推

按照视频中的方法，我们可以去掉递归中的「递」，只保留「归」的部分，即自底向上计算。

具体来说，$f[i][j]$ 的定义和 $\textit{dfs}(i,j)$ 的定义是一样的，都表示从前 $i$ 个完全平方数中选一些数（可以重复选），满足元素和**恰好**等于 $j$，最少要选的数字个数。

相应的递推式（状态转移方程）也和 $\textit{dfs}$ 一样：

$$
f[i][j] =
\begin{cases}
f[i - 1][j], & j < i^2     \\
\min(f[i - 1][j], f[i][j - i^2] + 1), & j\ge i^2     \\
\end{cases}
$$

初始值 $f[0][0]=0,\ f[0][j]=\infty\ (j>0)$，翻译自递归边界 $\textit{dfs}(0,0)=0$ 和 $\textit{dfs}(0,j) = \infty\ (j>0)$。

答案为 $f[\left\lfloor\sqrt n\right\rfloor][n]$，翻译自递归入口 $\textit{dfs}(\left\lfloor\sqrt n\right\rfloor, n)$。

* [sol-Python3]

```py
N = 10000
f = [[0] * (N + 1) for _ in range(isqrt(N) + 1)]
f[0] = [0] + [inf] * N
for i in range(1, len(f)):
    for j in range(N + 1):
        if j < i * i:
            f[i][j] = f[i - 1][j]  # 只能不选
        else:
            f[i][j] = min(f[i - 1][j], f[i][j - i * i] + 1)  # 不选 vs 选

class Solution:
    def numSquares(self, n: int) -> int:
        return f[isqrt(n)][n]  # 也可以写 f[-1][n]
```

* [sol-Java]

```java
class Solution {
    private static final int N = 10000;
    private static final int[][] f = new int[101][N + 1];

    static {
        Arrays.fill(f[0], Integer.MAX_VALUE);
        f[0][0] = 0;
        for (int i = 1; i * i <= N; i++) {
            for (int j = 0; j <= N; j++) {
                if (j < i * i) {
                    f[i][j] = f[i - 1][j]; // 只能不选
                } else {
                    f[i][j] = Math.min(f[i - 1][j], f[i][j - i * i] + 1); // 不选 vs 选
                }
            }
        }
    }

    public int numSquares(int n) {
        return f[(int) Math.sqrt(n)][n]; // 也可以写 f[100][n]
    }
}
```

* [sol-C++]

```cpp
const int N = 10000;
int f[101][N + 1];

auto init = [] {
    ranges::fill(f[0], INT_MAX);
    f[0][0] = 0;
    for (int i = 1; i * i <= N; i++) {
        for (int j = 0; j <= N; j++) {
            if (j < i * i) {
                f[i][j] = f[i - 1][j]; // 只能不选
            } else {
                f[i][j] = min(f[i - 1][j], f[i][j - i * i] + 1); // 不选 vs 选
            }
        }
    }
    return 0;
}();

class Solution {
public:
    int numSquares(int n) {
        return f[(int) sqrt(n)][n]; // 也可以写 f[100][n]
    }
};
```

* [sol-Go]

```go
const N = 10000
var f [101][N + 1]int

func init() {
    for i := 1; i <= N; i++ {
        f[0][i] = math.MaxInt
    }
    for i := 1; i*i <= N; i++ {
        for j := 0; j <= N; j++ {
            if j < i*i {
                f[i][j] = f[i-1][j] // 只能不选
            } else {
                f[i][j] = min(f[i-1][j], f[i][j-i*i]+1) // 不选 vs 选
            }
        }
    }
}

func numSquares(n int) int {
    return f[int(math.Sqrt(float64(n)))][n] // 也可以写 f[100][n]
}
```

* [sol-JavaScript]

```js
const N = 10000;
const f = Array.from({ length: 101 }, () => Array(N + 1).fill(Infinity));
f[0][0] = 0;
for (let i = 1; i * i <= N; i++) {
    for (let j = 0; j <= N; j++) {
        if (j < i * i) {
            f[i][j] = f[i - 1][j]; // 只能不选
        } else {
            f[i][j] = Math.min(f[i - 1][j], f[i][j - i * i] + 1); // 不选 vs 选
        }
    }
}

var numSquares = function(n) {
    return f[Math.floor(Math.sqrt(n))][n]; // 也可以写 f[100][n]
};
```

* [sol-Rust]

```rust
const N: usize = 10000;
static mut initialized: bool = false;
static mut dp: [[i32; N + 1]; 101] = [[i32::MAX; N + 1]; 101]; // 变量名 f 被评测机占用了

unsafe fn init_once() {
    if initialized {
        return;
    }
    initialized = true;
    dp[0][0] = 0;
    for i in 1..=100 {
        for j in 0..=N {
            if j < i * i {
                dp[i][j] = dp[i - 1][j]; // 只能不选
            } else {
                dp[i][j] = dp[i - 1][j].min(dp[i][j - i * i] + 1); // 不选 vs 选
            }
        }
    }
}

impl Solution {
    pub fn num_squares(n: i32) -> i32 {
        unsafe {
            init_once();
            dp[(n as f64).sqrt() as usize][n as usize] // 也可以写 dp[100][n as usize]
        }
    }
}
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(N\sqrt N)$。其中 $N=10^4$。
- 空间复杂度：$\mathcal{O}(N\sqrt N)$。

## 三、空间优化

观察上面的状态转移方程，在计算 $f[i]$ 时，只会用到 $f[i-1]$，不会用到比 $i-1$ 更早的状态。

因此可以去掉第一个维度，反复利用同一个长为 $N+1$ 的一维数组。

递推式简化为，当 $j\ge i^2$ 时，计算

$$
f[j] = \min(f[j], f[j - i^2] + 1)
$$

注意 $j<i^2$ 的递推式简化为 $f[j]=f[j]$，无需计算。

初始值 $f[0]=0,\ f[j]=\infty\ (j>0)$。

答案为 $f[n]$。

关于循环的顺序，见 [视频讲解](https://www.bilibili.com/video/BV16Y411v7Y6/)。

* [sol-Python3]

```py
N = 10000
f = [0] + [inf] * N
for i in range(1, isqrt(N) + 1):
    for j in range(i * i, N + 1):
        f[j] = min(f[j], f[j - i * i] + 1)  # 不选 vs 选

class Solution:
    def numSquares(self, n: int) -> int:
        return f[n]
```

* [sol-Java]

```java
class Solution {
    private static final int N = 10000;
    private static final int[] f = new int[N + 1];

    static {
        Arrays.fill(f, Integer.MAX_VALUE);
        f[0] = 0;
        for (int i = 1; i * i <= N; i++) {
            for (int j = i * i; j <= N; j++) {
                f[j] = Math.min(f[j], f[j - i * i] + 1); // 不选 vs 选
            }
        }
    }

    public int numSquares(int n) {
        return f[n];
    }
}
```

* [sol-C++]

```cpp
const int N = 10000;
int f[N + 1];

auto init = [] {
    ranges::fill(f, INT_MAX);
    f[0] = 0;
    for (int i = 1; i * i <= N; i++) {
        for (int j = i * i; j <= N; j++) {
            f[j] = min(f[j], f[j - i * i] + 1); // 不选 vs 选
        }
    }
    return 0;
}();

class Solution {
public:
    int numSquares(int n) {
        return f[n];
    }
};
```

* [sol-Go]

```go
const N = 10000
var f [N + 1]int

func init() {
    for i := 1; i <= N; i++ {
        f[i] = math.MaxInt
    }
    for i := 1; i*i <= N; i++ {
        for j := i * i; j <= N; j++ {
            f[j] = min(f[j], f[j-i*i]+1) // 不选 vs 选
        }
    }
}

func numSquares(n int) int {
    return f[n]
}
```

* [sol-JavaScript]

```js
const N = 10000;
const f = Array(N + 1).fill(Infinity);
f[0] = 0;
for (let i = 1; i * i <= N; i++) {
    for (let j = i * i; j <= N; j++) {
        f[j] = Math.min(f[j], f[j - i * i] + 1); // 不选 vs 选
    }
}

var numSquares = function(n) {
    return f[n];
};
```

* [sol-Rust]

```rust
const N: usize = 10000;
static mut initialized: bool = false;
static mut dp: [i32; N + 1] = [i32::MAX; N + 1]; // 变量名 f 被评测机占用了

unsafe fn init_once() {
    if initialized {
        return;
    }
    initialized = true;
    dp[0] = 0;
    for i in 1..=100 {
        for j in i * i..=N {
            dp[j] = dp[j].min(dp[j - i * i] + 1); // 不选 vs 选
        }
    }
}

impl Solution {
    pub fn num_squares(n: i32) -> i32 {
        unsafe {
            init_once();
            dp[n as usize]
        }
    }
}
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(N\sqrt N)$。其中 $N=10^4$。
- 空间复杂度：$\mathcal{O}(N)$。

## 相似题目

见 [动态规划题单](https://leetcode.cn/circle/discuss/tXLS3i/) 中的「**§3.2 完全背包**」。

## 分类题单

[如何科学刷题？](https://leetcode.cn/circle/discuss/RvFUtj/)

1. [滑动窗口（定长/不定长/多指针）](https://leetcode.cn/circle/discuss/0viNMK/)
2. [二分算法（二分答案/最小化最大值/最大化最小值/第K小）](https://leetcode.cn/circle/discuss/SqopEo/)
3. [单调栈（基础/矩形面积/贡献法/最小字典序）](https://leetcode.cn/circle/discuss/9oZFK9/)
4. [网格图（DFS/BFS/综合应用）](https://leetcode.cn/circle/discuss/YiXPXW/)
5. [位运算（基础/性质/拆位/试填/恒等式/思维）](https://leetcode.cn/circle/discuss/dHn9Vk/)
6. [图论算法（DFS/BFS/拓扑排序/最短路/最小生成树/二分图/基环树/欧拉路径）](https://leetcode.cn/circle/discuss/01LUak/)
7. [动态规划（入门/背包/状态机/划分/区间/状压/数位/数据结构优化/树形/博弈/概率期望）](https://leetcode.cn/circle/discuss/tXLS3i/)
8. [常用数据结构（前缀和/差分/栈/队列/堆/字典树/并查集/树状数组/线段树）](https://leetcode.cn/circle/discuss/mOr1u6/)
9. [数学算法（数论/组合/概率期望/博弈/计算几何/随机算法）](https://leetcode.cn/circle/discuss/IYT3ss/)
10. [贪心算法（基本贪心策略/反悔/区间/字典序/数学/思维/脑筋急转弯/构造）](https://leetcode.cn/circle/discuss/g6KTKL/)

[我的题解精选（已分类）](https://github.com/EndlessCheng/codeforces-go/blob/master/leetcode/SOLUTIONS.md)

欢迎关注 [B站@灵茶山艾府](https://space.bilibili.com/206214)
