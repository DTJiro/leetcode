## 入门视频

请看 [动态规划入门：从记忆化搜索到递推](https://b23.tv/72onpYq)

## 一、启发思考：寻找子问题

假设 $n=9$。

我们要解决的问题是从 $0$ 爬到 $9$ 有多少种不同的方法。

分类讨论：

- 如果最后一步爬了 $1$ 个台阶，那么我们得先爬到 $8$，要解决的问题缩小成：从 $0$ 爬到 $8$ 有多少种不同的方法。
- 如果最后一步爬了 $2$ 个台阶，那么我们得先爬到 $7$，要解决的问题缩小成：从 $0$ 爬到 $7$ 有多少种不同的方法。

由于这两种情况都会把原问题变成一个**和原问题相似的、规模更小的子问题**，所以可以用**递归**解决。

> 注 1：从大往小思考，主要是为了方便把递归翻译成递推。从小往大思考也是可以的。
>
> 注 2：动态规划有「选或不选」和「枚举选哪个」两种基本思考方式。在做题时，可根据题目要求，选择适合题目的一种来思考。本题用到的是「枚举选哪个」。

## 二、递归怎么写：状态定义与状态转移方程

因为要解决的问题都是「从 $0$ 爬到 $i$」，所以定义 $\textit{dfs}(i)$ 表示从 $0$ 爬到 $i$ 有多少种不同的方法。

分类讨论：

- 如果最后一步爬了 $1$ 个台阶，那么我们得先爬到 $i-1$，要解决的问题缩小成：从 $0$ 爬到 $i-1$ 有多少种不同的方法。
- 如果最后一步爬了 $2$ 个台阶，那么我们得先爬到 $i-2$，要解决的问题缩小成：从 $0$ 爬到 $i-2$ 有多少种不同的方法。

这两种方法是互相独立的，所以根据**加法原理**，从 $0$ 爬到 $i$ 的方法数等于这两种方法数之和，即

$$
\textit{dfs}(i) = \textit{dfs}(i-1) + \textit{dfs}(i-2)
$$

递归边界：$\textit{dfs}(0)=1,\ \textit{dfs}(1)=1$。从 $0$ 爬到 $0$ 有一种方法，即原地不动。从 $0$ 爬到 $1$ 有一种方法，即爬 $1$ 个台阶。

递归入口：$\textit{dfs}(n)$，也就是答案。

* [sol-Python3]

```py
# 会超时的递归代码
class Solution:
    def climbStairs(self, n: int) -> int:
        def dfs(i: int) -> int:
            if i <= 1:  # 递归边界
                return 1
            return dfs(i - 1) + dfs(i - 2)
        return dfs(n)
```

* [sol-Java]

```java
// 会超时的递归代码
public class Solution {
    public int climbStairs(int n) {
        return dfs(n);
    }

    private int dfs(int i) {
        if (i <= 1) { // 递归边界
            return 1;
        }
        return dfs(i - 1) + dfs(i - 2);
    }
}
```

* [sol-C++]

```cpp
// 会超时的递归代码
class Solution {
private:
    int dfs(int i) {
        if (i <= 1) { // 递归边界
            return 1;
        }
        return dfs(i - 1) + dfs(i - 2);
    }

public:
    int climbStairs(int n) {
        return dfs(n);
    }
};
```

* [sol-Go]

```go
// 会超时的递归代码
func dfs(i int) int {
    if i <= 1 { // 递归边界
        return 1
    }
    return dfs(i-1) + dfs(i-2)
}

func climbStairs(n int) int {
    return dfs(n)
}
```

* [sol-JavaScript]

```js
// 会超时的递归代码
var climbStairs = function(n) {
    function dfs(i) {
        if (i <= 1) { // 递归边界
            return 1;
        }
        return dfs(i - 1) + dfs(i - 2);
    }
    return dfs(n);
};
```

* [sol-Rust]

```rust
// 会超时的递归代码
impl Solution {
    pub fn climb_stairs(n: i32) -> i32 {
        fn dfs(i: usize) -> i32 {
            if i <= 1 { // 递归边界
                return 1;
            }
            dfs(i - 1) + dfs(i - 2)
        }
        dfs(n as usize)
    }
}
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(2^n)$。搜索树可以近似为一棵二叉树，树高为 $\mathcal{O}(n)$，所以节点个数为 $\mathcal{O}(2^n)$，遍历搜索树需要 $\mathcal{O}(2^n)$ 的时间。
- 空间复杂度：$\mathcal{O}(n)$。递归需要 $\mathcal{O}(n)$ 的栈空间。

## 三、递归 + 记录返回值 = 记忆化搜索

上面的做法太慢了，怎么优化呢？

注意到「先爬 $1$ 个台阶，再爬 $2$ 个台阶」和「先爬 $2$ 个台阶，再爬 $1$ 个台阶」，都相当于爬 $3$ 个台阶，都会从 $\textit{dfs}(i)$ 递归到 $\textit{dfs}(i-3)$。

一叶知秋，整个递归中有大量重复递归调用（递归入参相同）。由于递归函数没有副作用，同样的入参无论计算多少次，算出来的结果都是一样的，因此可以用**记忆化搜索**来优化：

- 如果一个状态（递归入参）是第一次遇到，那么可以在返回前，把状态及其结果记到一个 $\textit{memo}$ 数组中。
- 如果一个状态不是第一次遇到（$\textit{memo}$ 中保存的结果不等于 $\textit{memo}$ 的初始值），那么可以直接返回 $\textit{memo}$ 中保存的结果。

**注意**：$\textit{memo}$ 数组的**初始值**一定不能等于要记忆化的值！例如初始值设置为 $0$，并且要记忆化的 $\textit{dfs}(i)$ 也等于 $0$，那就没法判断 $0$ 到底表示第一次遇到这个状态，还是表示之前遇到过了，从而导致记忆化失效。一般把初始值设置为 $-1$。本题由于方案数均为正数，所以可以初始化成 $0$。

> Python 用户可以无视上面这段，直接用 `@cache` 装饰器。

* [sol-Python3]

```py
class Solution:
    def climbStairs(self, n: int) -> int:
        @cache  # 缓存装饰器，避免重复计算 dfs 的结果
        def dfs(i: int) -> int:
            if i <= 1:  # 递归边界
                return 1
            return dfs(i - 1) + dfs(i - 2)
        return dfs(n)
```

* [sol-Java]

```java
public class Solution {
    public int climbStairs(int n) {
        int[] memo = new int[n + 1];
        return dfs(n, memo);
    }

    private int dfs(int i, int[] memo) {
        if (i <= 1) { // 递归边界
            return 1;
        }
        if (memo[i] != 0) { // 之前计算过
            return memo[i];
        }
        return memo[i] = dfs(i - 1, memo) + dfs(i - 2, memo); // 记忆化
    }
}
```

* [sol-C++]

```cpp
class Solution {
private:
    vector<int> memo;

    int dfs(int i) {
        if (i <= 1) { // 递归边界
            return 1;
        }
        int &res = memo[i]; // 注意这里是引用
        if (res) { // 之前计算过
            return res;
        }
        return res = dfs(i - 1) + dfs(i - 2); // 记忆化
    }

public:
    int climbStairs(int n) {
        memo.resize(n + 1);
        return dfs(n);
    }
};
```

* [sol-Go]

```go
func climbStairs(n int) int {
    memo := make([]int, n+1)
    var dfs func(int) int
    dfs = func(i int) int {
        if i <= 1 { // 递归边界
            return 1
        }
        p := &memo[i]
        if *p != 0 { // 之前计算过
            return *p
        }
        res := dfs(i-1) + dfs(i-2)
        *p = res // 记忆化
        return res
    }
    return dfs(n)
}
```

* [sol-JavaScript]

```js
var climbStairs = function(n) {
    memo = Array(n + 1).fill(0);
    function dfs(i) {
        if (i <= 1) { // 递归边界
            return 1;
        }
        if (memo[i]) { // 之前计算过
            return memo[i];
        }
        return memo[i] = dfs(i - 1) + dfs(i - 2); // 记忆化
    }
    return dfs(n);
};
```

* [sol-Rust]

```rust
impl Solution {
    pub fn climb_stairs(n: i32) -> i32 {
        fn dfs(i: usize, memo: &mut Vec<i32>) -> i32 {
            if i <= 1 { // 递归边界
                return 1;
            }
            if memo[i] != 0 { // 之前计算过
                return memo[i];
            }
            let res = dfs(i - 1, memo) + dfs(i - 2, memo);
            memo[i] = res; // 记忆化
            res
        }
        let n = n as usize;
        let mut memo = vec![0; n + 1];
        dfs(n, &mut memo)
    }
}
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(n)$。由于每个状态只会计算一次，动态规划的时间复杂度 $=$ 状态个数 $\times$ 单个状态的计算时间。本题状态个数等于 $\mathcal{O}(n)$，单个状态的计算时间为 $\mathcal{O}(1)$，所以动态规划的时间复杂度为 $\mathcal{O}(n)$。
- 空间复杂度：$\mathcal{O}(n)$。有多少个状态，$\textit{memo}$ 数组的大小就是多少。

## 四、1:1 翻译成递推

我们可以去掉递归中的「递」，只保留「归」的部分，即自底向上计算。

具体来说，$f[i]$ 的定义和 $\textit{dfs}(i)$ 的定义是一样的，都表示从 $0$ 爬到 $i$ 有多少种不同的方法。

相应的递推式（状态转移方程）也和 $\textit{dfs}$ 一样：

$$
f[i] = f[i-1] + f[i-2]
$$

> 相当于之前是用递归去计算每个状态，现在是**枚举**并计算每个状态。

初始值 $f[0]=1,\ f[1]=1$，翻译自递归边界 $\textit{dfs}(0)=1,\ \textit{dfs}(1)=1$。

答案为 $f[n]$，翻译自递归入口 $\textit{dfs}(n)$。

* [sol-Python3]

```py
class Solution:
    def climbStairs(self, n: int) -> int:
        f = [0] * (n + 1)
        f[0] = f[1] = 1
        for i in range(2, n + 1):
            f[i] = f[i - 1] + f[i - 2]
        return f[n]
```

* [sol-Java]

```java
public class Solution {
    public int climbStairs(int n) {
        int[] f = new int[n + 1];
        f[0] = f[1] = 1;
        for (int i = 2; i <= n; i++) {
            f[i] = f[i - 1] + f[i - 2];
        }
        return f[n];
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    int climbStairs(int n) {
        vector<int> f(n + 1);
        f[0] = f[1] = 1;
        for (int i = 2; i <= n; i++) {
            f[i] = f[i - 1] + f[i - 2];
        }
        return f[n];
    }
};
```

* [sol-Go]

```go
func climbStairs(n int) int {
    f := make([]int, n+1)
    f[0], f[1] = 1, 1
    for i := 2; i <= n; i++ {
        f[i] = f[i-1] + f[i-2]
    }
    return f[n]
}
```

* [sol-JavaScript]

```js
var climbStairs = function(n) {
    const f = Array(n + 1).fill(0);
    f[0] = f[1] = 1;
    for (let i = 2; i <= n; i++) {
        f[i] = f[i - 1] + f[i - 2];
    }
    return f[n];
};
```

* [sol-Rust]

```rust
impl Solution {
    pub fn climb_stairs(n: i32) -> i32 {
        let n = n as usize;
        let mut f = vec![0; n + 1];
        f[0] = 1;
        f[1] = 1;
        for i in 2..=n {
            f[i] = f[i - 1] + f[i - 2];
        }
        f[n]
    }
}
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(n)$。
- 空间复杂度：$\mathcal{O}(n)$。

## 五、空间优化

观察状态转移方程，发现一旦算出 $f[i]$，那么 $f[i-2]$ 及其左边的状态就永远不会用到了。

这意味着每次循环，只需要知道「上一个状态」和「上上一个状态」的 $f$ 值是多少，分别记作 $f_1$ 和 $f_0$。它俩的初始值均为 $1$，对应着 $f[1]$ 和 $f[0]$。

每次循环，计算出新的状态 $\textit{newF} = f_1 + f_0$，那么对于下一轮循环来说：

- 「上上一个状态」就是 $f_1$，更新 $f_0 = f_1$。
- 「上一个状态」就是 $\textit{newF}$，更新 $f_1 = \textit{newF}$。

最后答案为 $f_1$，因为最后一轮循环算出的 $\textit{newF}$ 赋给了 $f_1$。

* [sol-Python3]

```py
class Solution:
    def climbStairs(self, n: int) -> int:
        f0 = f1 = 1
        for _ in range(2, n + 1):
            new_f = f1 + f0
            f0 = f1
            f1 = new_f
        return f1
```

* [sol-Python3写法二]

```py
class Solution:
    def climbStairs(self, n: int) -> int:
        f0 = f1 = 1
        for _ in range(2, n + 1):
            f0, f1 = f1, f1 + f0
        return f1
```

* [sol-Java]

```java
public class Solution {
    public int climbStairs(int n) {
        int f0 = 1, f1 = 1;
        for (int i = 2; i <= n; i++) {
            int newF = f1 + f0;
            f0 = f1;
            f1 = newF;
        }
        return f1;
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    int climbStairs(int n) {
        int f0 = 1, f1 = 1;
        for (int i = 2; i <= n; i++) {
            int new_f = f1 + f0;
            f0 = f1;
            f1 = new_f;
        }
        return f1;
    }
};
```

* [sol-Go]

```go
func climbStairs(n int) int {
    f0, f1 := 1, 1
    for i := 2; i <= n; i++ {
        f0, f1 = f1, f1+f0
    }
    return f1
}
```

* [sol-JavaScript]

```js
var climbStairs = function(n) {
    let f0 = 1, f1 = 1;
    for (let i = 2; i <= n; i++) {
        let newF = f1 + f0;
        f0 = f1;
        f1 = newF;
    }
    return f1;
};
```

* [sol-Rust]

```rust
impl Solution {
    pub fn climb_stairs(n: i32) -> i32 {
        let mut f0 = 1;
        let mut f1 = 1;
        for i in 2..=n {
            let new_f = f1 + f0;
            f0 = f1;
            f1 = new_f;
        }
        f1
    }
}
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(n)$。
- 空间复杂度：$\mathcal{O}(1)$。仅用到若干变量。

## 思考题

1. 如果每次可以爬 $1$ 或 $2$ 或 $3$ 个台阶呢？空间优化的写法要怎么做？
2. 如果某些台阶不能爬呢？（输入一个数组表示不能爬的台阶编号）

欢迎在评论区发表你的思路。

## 动态规划题单

- [动态规划（入门/背包/状态机/划分/区间/状压/数位/数据结构优化/树形/博弈/概率期望）](https://leetcode.cn/circle/discuss/tXLS3i/)

## 其它题单

- [滑动窗口（定长/不定长/多指针）](https://leetcode.cn/circle/discuss/0viNMK/)
- [二分算法（二分答案/最小化最大值/最大化最小值/第K小）](https://leetcode.cn/circle/discuss/SqopEo/)
- [单调栈（矩形系列/字典序最小/贡献法）](https://leetcode.cn/circle/discuss/9oZFK9/)
- [网格图（DFS/BFS/综合应用）](https://leetcode.cn/circle/discuss/YiXPXW/)
- [位运算（基础/性质/拆位/试填/恒等式/贪心/脑筋急转弯）](https://leetcode.cn/circle/discuss/dHn9Vk/)
- [图论算法（DFS/BFS/拓扑排序/最短路/最小生成树/二分图/基环树/欧拉路径）](https://leetcode.cn/circle/discuss/01LUak/)
- [常用数据结构（前缀和/差分/栈/队列/堆/字典树/并查集/树状数组/线段树）](https://leetcode.cn/circle/discuss/mOr1u6/)

欢迎关注 [B站@灵茶山艾府](https://space.bilibili.com/206214)

[我的题解精选（已分类）](https://github.com/EndlessCheng/codeforces-go/blob/master/leetcode/SOLUTIONS.md)
