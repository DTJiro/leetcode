之前没想通的，现在想通了，记录一下。

# 双指针

设置两个指针，一个叫快指针 $fast$ ，一个叫慢指针 $slow$ ，一开始两个指针都是指向头部，一个一次走两步，一个一次走一步，只有两种结果：
1. 快指针率先到达终点；
2. 快指针进入环，并疯狂兜圈后追尾慢指针；

**很好理解是吧？**

但类似于我，很久之前就看到这题了，当时脑子不好，会有这个疑问：**快指针一次走两步不会在某个时刻突然超过慢指针而错过？**

![image.png](https://pic.leetcode.cn/1690600916-wTOjqD-image.png)

脑海里就是这个图。

其实就算出现也没有问题，比较呆的办法就是 $fast$ 每次 $next$ 都同时检查是否为空或者 $slow$ ，但还是无法消除我的疑问，如果真的存在“跳跃”那么一次检查两下 $next$ 效率也不高，而真有“跳跃”而且每次都错过慢指针会造成死循环吗？

答案是**不会**，**且不存在**“跳跃”的情况，所以不需要检查 $fast.next$，直接 $fast.next.next$ 即可。虽然实际还是需要检查 $fast.next$ ，但那是因为可能不是环，如果题目给的链一定是环，不需要检查 $fast.next$ 。

有两种理解方法

### 1. 只关注两者间距离

最容易的理解的方法就是不要想象 $fast$ 单次直接是 $+2$ ，是分成两步，首先 $slow +1$ 同时 $fast+1$ ，那么他们之间相对距离没有变化，然后 $fast$ 再次 $+1$ ，这样距离就缩短 $1$ 了，所以每次缩进都是 $1$ 不可能遗漏任何碰撞事件。

### 2. 错位模拟

任何位置的 $fast$ 只要是有环，且不断向前，最后都会出现这个情况：

![image.png](https://pic.leetcode.cn/1690601705-pmYANb-image.png)

首先紧跟 $slow$ ，然后 $slow+1$ ，最后 $fast+2$ 到两者重合结束。

无论把时间继续往前追溯还是继续，最后都是一样。而实际上，上图的阶段一，如果不分行走的先后顺序，直接 $fast+2$ 就是一开始想象的“错位图”，所以出现错位只是源于谁走第一步的问题而已，如果是 $fast$ 走的第一步，那么 $slow$ 是第二步，两者也会重合，只是结束参考物变成 $slow$ 而已。

* []

```python
class Solution:
    def hasCycle(self, head: Optional[ListNode]) -> bool:
        if head == None or head.next == None: return False
        slow = head
        fast = head.next
        while fast != slow:
            if fast.next == None or fast.next.next == None: return False
            slow = slow.next
            fast = fast.next.next
        return True
```

* []

```java
public class Solution {
    public boolean hasCycle(ListNode head) {
        if (head == null) return false;
        ListNode slow = head, fast = head;
        do {
            if (fast.next == null || fast.next.next == null) return false;
            fast = fast.next.next;
            slow = slow.next;
        } while (fast != slow);
        return true;
    }
}
```

# 相关题型

实际上想通了这题，就做这个吧
[题解](https://leetcode.cn/problems/linked-list-cycle-ii/solution/tu-wen-jie-huo-wei-shi-yao-bu-hui-cuo-we-wk8g/) -- [142. 环形链表 II](https://leetcode.cn/problems/linked-list-cycle-ii/)

# 格局打开

大佬门的花式解题过于精彩，不得不记录一下，泰裤辣

* []

```python
f = open("user.out", "w")
while True:
    try:
        param_1 = input()
        param_2 = int(input())
        f.write('true\n' if param_2 > -1 else 'false\n')
    except:
        break
exit()
```

# 完

格局打开了请点赞有用👍🏻
