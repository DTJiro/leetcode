# 前言

可以将变量和变量之间的等式关系看成无向图，每个变量对应图中的一个结点，每个等式关系对应图中的一条边，边对应的值即为该等式关系中的值。

建立无向图之后，对于每个问题 $[\textit{start}, \textit{end}]$，需要在无向图中寻找从结点 $\textit{start}$ 到结点 $\textit{end}$ 的路径，并计算路径上的每条边的值的乘积作为该问题的答案。可以使用广度优先搜索或深度优先搜索实现。

# 解法一

## 思路和算法

首先根据给定的数组 $\textit{equations}$ 和 $\textit{values}$ 建立无向图，使用哈希表记录每个结点的相邻结点与对应的边的值。然后遍历问题数组 $\textit{queries}$，对于每个问题 $[\textit{start}, \textit{end}]$ 使用广度优先搜索寻找图中的从结点 $\textit{start}$ 到结点 $\textit{end}$ 的路径，并计算路径上的每条边的值的乘积作为该问题的答案。

使用广度优先搜索时，需要使用哈希集合存储已经访问过的结点，并使用两个队列分别存储待访问的结点与到达该结点经过的所有边的值的乘积。对于每个问题 $[\textit{start}, \textit{end}]$，从结点 $\textit{start}$ 开始遍历，初始时经过的所有边的值的乘积等于 $1$，当访问到结点 $\textit{end}$ 时，经过的所有边的值的乘积即为该问题的答案。

## 代码

* [sol1-Java]

```Java
class Solution {
    Map<String, Map<String, Double>> nodesEdges = new HashMap<String, Map<String, Double>>();

    public double[] calcEquation(List<List<String>> equations, double[] values, List<List<String>> queries) {
        int edgesCount = equations.size();
        for (int i = 0; i < edgesCount; i++) {
            List<String> equation = equations.get(i);
            double value = values[i];
            String node0 = equation.get(0), node1 = equation.get(1);
            nodesEdges.putIfAbsent(node0, new HashMap<String, Double>());
            nodesEdges.get(node0).put(node1, value);
            nodesEdges.putIfAbsent(node1, new HashMap<String, Double>());
            nodesEdges.get(node1).put(node0, 1.0 / value);
        }
        int queriesCount = queries.size();
        double[] answer = new double[queriesCount];
        for (int i = 0; i < queriesCount; i++) {
            String start = queries.get(i).get(0), end = queries.get(i).get(1);
            answer[i] = nodesEdges.containsKey(start) && nodesEdges.containsKey(end) ? bfs(start, end) : -1.0;
        }
        return answer;
    }

    public double bfs(String start, String end) {
        double queryValue = -1.0;
        Set<String> visited = new HashSet<String>();
        Queue<String> nodeQueue = new ArrayDeque<String>();
        Queue<Double> valueQueue = new ArrayDeque<Double>();
        visited.add(start);
        nodeQueue.offer(start);
        valueQueue.offer(1.0);
        while (queryValue < 0 && !nodeQueue.isEmpty()) {
            String node = nodeQueue.poll();
            double value = valueQueue.poll();
            if (node.equals(end)) {
                queryValue = value;
            } else {
                Map<String, Double> adjacent = nodesEdges.getOrDefault(node, new HashMap<String, Double>());
                Set<Map.Entry<String, Double>> entries = adjacent.entrySet();
                for (Map.Entry<String, Double> entry : entries) {
                    String nextNode = entry.getKey();
                    double nextValue = entry.getValue();
                    if (visited.add(nextNode)) {
                        nodeQueue.offer(nextNode);
                        valueQueue.offer(value * nextValue);
                    }
                }
            }
        }
        return queryValue;
    }
}
```

* [sol1-C#]

```C#
public class Solution {
    IDictionary<string, IDictionary<string, double>> nodesEdges = new Dictionary<string, IDictionary<string, double>>();

    public double[] CalcEquation(IList<IList<string>> equations, double[] values, IList<IList<string>> queries) {
        int edgesCount = equations.Count;
        for (int i = 0; i < edgesCount; i++) {
            IList<string> equation = equations[i];
            double value = values[i];
            string node0 = equation[0], node1 = equation[1];
            nodesEdges.TryAdd(node0, new Dictionary<string, double>());
            nodesEdges[node0].Add(node1, value);
            nodesEdges.TryAdd(node1, new Dictionary<string, double>());
            nodesEdges[node1].Add(node0, 1.0 / value);
        }
        int queriesCount = queries.Count;
        double[] answer = new double[queriesCount];
        for (int i = 0; i < queriesCount; i++) {
            string start = queries[i][0], end = queries[i][1];
            answer[i] = nodesEdges.ContainsKey(start) && nodesEdges.ContainsKey(end) ? BFS(start, end) : -1.0;
        }
        return answer;
    }

    public double BFS(string start, string end) {
        double queryValue = -1.0;
        ISet<string> visited = new HashSet<string>();
        Queue<string> nodeQueue = new Queue<string>();
        Queue<double> valueQueue = new Queue<double>();
        visited.Add(start);
        nodeQueue.Enqueue(start);
        valueQueue.Enqueue(1.0);
        while (queryValue < 0 && nodeQueue.Count > 0) {
            string node = nodeQueue.Dequeue();
            double value = valueQueue.Dequeue();
            if (node.Equals(end)) {
                queryValue = value;
            } else {
                IDictionary<string, double> adjacent = nodesEdges.ContainsKey(node) ? nodesEdges[node] : new Dictionary<string, double>();
                foreach (KeyValuePair<string, double> pair in adjacent) {
                    string nextNode = pair.Key;
                    double nextValue = pair.Value;
                    if (visited.Add(nextNode)) {
                        nodeQueue.Enqueue(nextNode);
                        valueQueue.Enqueue(value * nextValue);
                    }
                }
            }
        }
        return queryValue;
    }
}
```

## 复杂度分析

- 时间复杂度：$O(mq)$，其中 $m$ 是数组 $\textit{equations}$ 和 $\textit{values}$ 的长度，$q$ 是数组 $\textit{queries}$ 的长度。遍历数组 $\textit{equations}$ 和 $\textit{values}$ 构建图结构的时间是 $O(m)$，图中的边数是 $m$ 且结点数是 $O(m)$，因此对于每个问题的广度优先搜索的时间是 $O(m)$，时间复杂度是 $O(mq)$。

- 空间复杂度：$O(m)$，其中 $m$ 是数组 $\textit{equations}$ 和 $\textit{values}$ 的长度。存储图结构的哈希表和广度优先搜索的空间是 $O(m)$。注意返回值不计入空间复杂度。

# 解法二

## 思路和算法

首先根据给定的数组 $\textit{equations}$ 和 $\textit{values}$ 建立无向图，使用哈希表记录每个结点的相邻结点与对应的边的值。然后遍历问题数组 $\textit{queries}$，对于每个问题 $[\textit{start}, \textit{end}]$ 使用广度优先搜索寻找图中的从结点 $\textit{start}$ 到结点 $\textit{end}$ 的路径，并计算路径上的每条边的值的乘积作为该问题的答案。

使用深度优先搜索时，需要使用哈希集合存储已经访问过的结点，并维护待访问的结点与到达该结点经过的所有边的值的乘积。对于每个问题 $[\textit{start}, \textit{end}]$，从结点 $\textit{start}$ 开始遍历，初始时经过的所有边的值的乘积等于 $1$，当访问到结点 $\textit{end}$ 时，经过的所有边的值的乘积即为该问题的答案。

## 代码

* [sol2-Java]

```Java
class Solution {
    Map<String, Map<String, Double>> nodesEdges = new HashMap<String, Map<String, Double>>();
    Set<String> visited = new HashSet<String>();

    public double[] calcEquation(List<List<String>> equations, double[] values, List<List<String>> queries) {
        int edgesCount = equations.size();
        for (int i = 0; i < edgesCount; i++) {
            List<String> equation = equations.get(i);
            double value = values[i];
            String node0 = equation.get(0), node1 = equation.get(1);
            nodesEdges.putIfAbsent(node0, new HashMap<String, Double>());
            nodesEdges.get(node0).put(node1, value);
            nodesEdges.putIfAbsent(node1, new HashMap<String, Double>());
            nodesEdges.get(node1).put(node0, 1.0 / value);
        }
        int queriesCount = queries.size();
        double[] answer = new double[queriesCount];
        for (int i = 0; i < queriesCount; i++) {
            String start = queries.get(i).get(0), end = queries.get(i).get(1);
            answer[i] = nodesEdges.containsKey(start) && nodesEdges.containsKey(end) ? dfs(start, end, 1.0) : -1.0;
        }
        return answer;
    }

    public double dfs(String start, String end, double value) {
        if (start.equals(end)) {
            return value;
        }
        double queryValue = -1.0;
        visited.add(start);
        Map<String, Double> adjacent = nodesEdges.getOrDefault(start, new HashMap<String, Double>());
        Set<Map.Entry<String, Double>> entries = adjacent.entrySet();
        for (Map.Entry<String, Double> entry : entries) {
            String nextNode = entry.getKey();
            double nextValue = entry.getValue();
            if (!visited.contains(nextNode)) {
                queryValue = dfs(nextNode, end, value * nextValue);
                if (queryValue > 0) {
                    break;
                }
            }
        }
        visited.remove(start);
        return queryValue;
    }
}
```

* [sol2-C#]

```C#
public class Solution {
    IDictionary<string, IDictionary<string, double>> nodesEdges = new Dictionary<string, IDictionary<string, double>>();
    ISet<string> visited = new HashSet<string>();

    public double[] CalcEquation(IList<IList<string>> equations, double[] values, IList<IList<string>> queries) {
        int edgesCount = equations.Count;
        for (int i = 0; i < edgesCount; i++) {
            IList<string> equation = equations[i];
            double value = values[i];
            string node0 = equation[0], node1 = equation[1];
            nodesEdges.TryAdd(node0, new Dictionary<string, double>());
            nodesEdges[node0].Add(node1, value);
            nodesEdges.TryAdd(node1, new Dictionary<string, double>());
            nodesEdges[node1].Add(node0, 1.0 / value);
        }
        int queriesCount = queries.Count;
        double[] answer = new double[queriesCount];
        for (int i = 0; i < queriesCount; i++) {
            string start = queries[i][0], end = queries[i][1];
            answer[i] = nodesEdges.ContainsKey(start) && nodesEdges.ContainsKey(end) ? DFS(start, end, 1.0) : -1.0;
        }
        return answer;
    }

    public double DFS(string start, string end, double value) {
        if (start.Equals(end)) {
            return value;
        }
        double queryValue = -1.0;
        visited.Add(start);
        IDictionary<string, double> adjacent = nodesEdges.ContainsKey(start) ? nodesEdges[start] : new Dictionary<string, double>();
        foreach (KeyValuePair<string, double> pair in adjacent) {
            string nextNode = pair.Key;
            double nextValue = pair.Value;
            if (!visited.Contains(nextNode)) {
                queryValue = DFS(nextNode, end, value * nextValue);
                if (queryValue > 0) {
                    break;
                }
            }
        }
        visited.Remove(start);
        return queryValue;
    }
}
```

## 复杂度分析

- 时间复杂度：$O(mq)$，其中 $m$ 是数组 $\textit{equations}$ 和 $\textit{values}$ 的长度，$q$ 是数组 $\textit{queries}$ 的长度。遍历数组 $\textit{equations}$ 和 $\textit{values}$ 构建图结构的时间是 $O(m)$，图中的边数是 $m$ 且结点数是 $O(m)$，因此对于每个问题的深度优先搜索的时间是 $O(m)$，时间复杂度是 $O(mq)$。

- 空间复杂度：$O(m)$，其中 $m$ 是数组 $\textit{equations}$ 和 $\textit{values}$ 的长度。存储图结构的哈希表和深度优先搜索的空间是 $O(m)$。注意返回值不计入空间复杂度。

