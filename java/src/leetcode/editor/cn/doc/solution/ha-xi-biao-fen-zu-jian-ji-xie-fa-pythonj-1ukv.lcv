## 题意解读

把每种字母出现次数都相同的字符串分到同一组。

例如 $\texttt{aab},\texttt{aba},\texttt{baa}$ 可以分到同一组，但 $\texttt{abb}$ 不行。

## 思路

注意到，如果把 $\texttt{aab},\texttt{aba},\texttt{baa}$ 按照字母从小到大排序，我们可以得到同一个字符串 $\texttt{aab}$。

而对于每种字母出现次数不同于 $\texttt{aab}$ 的字符串，例如 $\texttt{abb}$ 和 $\texttt{bab}$，排序后为 $\texttt{abb}$，不等于 $\texttt{aab}$。

所以当且仅当两个字符串排序后一样，这两个字符串才能分到同一组。

根据这一点，我们可以用哈希表来分组，把排序后的字符串当作 key，原字符串组成的列表（即答案）当作 value。

最后把所有 value 加到一个列表中返回。

* [sol-Python3]

```py
class Solution:
    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:
        d = defaultdict(list)
        for s in strs:
            d[''.join(sorted(s))].append(s)  # sorted(s) 相同的字符串分到同一组
        return list(d.values())
```

* [sol-Java]

```java
class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
        Map<String, List<String>> m = new HashMap<>();
        for (String str : strs) {
            char[] s = str.toCharArray();
            Arrays.sort(s);
            // s 相同的字符串分到同一组
            m.computeIfAbsent(new String(s), k -> new ArrayList<>()).add(str);
        }
        return new ArrayList<>(m.values());
    }
}
```

* [sol-JavaStream]

```java
class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
        return new ArrayList<>(Arrays.stream(strs)
                .collect(Collectors.groupingBy(
                        str -> {
                            char[] s = str.toCharArray();
                            Arrays.sort(s);
                            return new String(s);
                        }
                ))
                .values());
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    vector<vector<string>> groupAnagrams(vector<string> &strs) {
        unordered_map<string, vector<string>> m;
        for (auto &s : strs) {
            string sorted_s = s;
            ranges::sort(sorted_s);
            m[sorted_s].push_back(s); // sorted_s 相同的字符串分到同一组
        }
        vector<vector<string>> ans;
        ans.reserve(m.size()); // 预分配空间
        for (auto &[_, value] : m) {
            ans.push_back(value);
        }
        return ans;
    }
};
```

* [sol-Go]

```go
func groupAnagrams(strs []string) [][]string {
    m := map[string][]string{}
    for _, s := range strs {
        t := []byte(s)
        slices.Sort(t)
        sortedS := string(t)
        m[sortedS] = append(m[sortedS], s) // sortedS 相同的字符串分到同一组
    }
    ans := make([][]string, 0, len(m)) // 预分配空间
    for _, v := range m {
        ans = append(ans, v)
    }
    return ans
}
```

* [sol-JavaScript]

```js
var groupAnagrams = function(strs) {
    const g = _.groupBy(strs, s => s.split('').sort().join(''));
    return Object.values(g);
};
```

* [sol-Rust]

```rust
use std::collections::HashMap;

impl Solution {
    pub fn group_anagrams(strs: Vec<String>) -> Vec<Vec<String>> {
        let mut m = HashMap::new();
        for s in strs {
            let mut sorted_s = s.clone().into_bytes();
            sorted_s.sort_unstable();
            m.entry(sorted_s).or_insert(vec![]).push(s); // sorted_s 相同的字符串分到同一组
        }
        m.into_values().collect()
    }
}
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(nm\log m)$，其中 $n$ 为 $\textit{strs}$ 的长度，$m$ 为 $\textit{strs}[i]$ 的长度。
- 空间复杂度：$\mathcal{O}(nm)$。

## 分类题单

1. [滑动窗口（定长/不定长/多指针）](https://leetcode.cn/circle/discuss/0viNMK/)
2. [二分算法（二分答案/最小化最大值/最大化最小值/第K小）](https://leetcode.cn/circle/discuss/SqopEo/)
3. [单调栈（矩形系列/字典序最小/贡献法）](https://leetcode.cn/circle/discuss/9oZFK9/)
4. [网格图（DFS/BFS/综合应用）](https://leetcode.cn/circle/discuss/YiXPXW/)
5. [位运算（基础/性质/拆位/试填/恒等式/贪心/脑筋急转弯）](https://leetcode.cn/circle/discuss/dHn9Vk/)
6. [图论算法（DFS/BFS/拓扑排序/最短路/最小生成树/二分图/基环树/欧拉路径）](https://leetcode.cn/circle/discuss/01LUak/)
7. [动态规划（入门/背包/状态机/划分/区间/状压/数位/数据结构优化/树形/博弈/概率期望）](https://leetcode.cn/circle/discuss/tXLS3i/)

更多题单，点我个人主页 - 讨论发布。

欢迎关注 [B站@灵茶山艾府](https://space.bilibili.com/206214)

[往期题解精选（已分类）](https://github.com/EndlessCheng/codeforces-go/blob/master/leetcode/SOLUTIONS.md)
