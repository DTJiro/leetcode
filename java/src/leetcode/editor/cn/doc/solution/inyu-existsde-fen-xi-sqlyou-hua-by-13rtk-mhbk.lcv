# 题意

(根据《阿里巴巴Java开发手册》表名不能出现大写字母，且表名不能为复数)

给你一张消费者信息表，一张订单表，一张产品信息表，请你查询出其中每个产品的最新一天的订单信息

# 思路

- 因为需要的是每个产品的最新一天的信息，所以这里我们需要先获取每个产品对应的最新一天，SQL如下

SQL1:

* mysql

```mysql
SELECT
	product_id,
	MAX(order_date) AS 'order_date'
FROM
	Orders
GROUP BY product_id
```

- 获取后以该临时表为WHERE子句的参数，进行限制即可，最后注意连接顺序，最终SQL如下

* mysql

```mysql
SELECT
    t1.product_name,
    t2.product_id,
    t2.order_id,
    t2.order_date
FROM
    Products AS t1
INNER JOIN Orders AS t2 ON t1.product_id = t2.product_id
WHERE (t2.product_id, t2.order_date) IN (
    SQL1
)
ORDER BY t1.product_name, t2.product_id, t2.order_id
```

&nbsp;
&nbsp;
&nbsp;

# 拓展

- 如果了解过EXISTS的朋友可能知道：EXISTS的性能往往要比IN要好，如果还恰巧读过《阿里巴巴Java开发手册》的话，可能会记得其中SQL语句部分有这样一句话:
- 【推荐】in 操作能避免则避免，若实在避免不了，需要仔细评估 in 后边的集合元素数量，控制在 1000 个之内。
- 那么我们就把IN改写为EXISTS，SQL如下

* mysql

```mysql
SELECT
    t1.product_name,
    t2.product_id,
    t2.order_id,
    t2.order_date
FROM
    Products AS t1
INNER JOIN Orders AS t2 ON t1.product_id = t2.product_id
WHERE EXISTS (
    SELECT
        product_id,
        MAX(order_date) AS 'last_order_date'
    FROM
        Orders AS t3
    GROUP BY product_id
    HAVING t1.product_id = t3.product_id AND t2.order_date = last_order_date
)
ORDER BY t1.product_name, t2.product_id, t2.order_id
```

- 但此时力扣的提交记录上却显示改为EXISTS后用时几乎翻倍了？！这是什么情况？难道是那些写书的在乱写？其实不然
- 在用IN的版本中，我们的子查询为“不相关子查询”，不相关子查询的执行顺序如图

![Xnip2022-02-13_13-17-12.jpg](https://pic.leetcode-cn.com/1644732672-hsEcUQ-Xnip2022-02-13_13-17-12.jpg)
![Xnip2022-02-13_13-20-57.jpg](https://pic.leetcode-cn.com/1644732680-XPMrhs-Xnip2022-02-13_13-20-57.jpg)
&nbsp;
&nbsp;
&nbsp;
&nbsp;
- 而在EXISTS的版本中，我们使用的是相关子查询，其执行顺序如图:
  ![Xnip2022-02-13_13-22-15.jpg](https://pic.leetcode-cn.com/1644732713-POpqrS-Xnip2022-02-13_13-22-15.jpg)
- 很明显，相关子查询的步骤较多，自然用时就长

// 笔记来自《MySQL是怎样运行的》
&nbsp;
&nbsp;
&nbsp;
&nbsp;

# 优化

- 因为IN的版本为不相关子查询，所以我们以IN的版本为基础来优化
- 由查询计划可知，因为Orders表中的product_id上没有任何索引，所以子查询表中的Extra列为"Using temporary"和"Using filesort"，此时开销为10.81
  ![Xnip2022-02-13_13-37-25.jpg](https://pic.leetcode-cn.com/1644732761-Yokicj-Xnip2022-02-13_13-37-25.jpg)
  ![Xnip2022-02-13_13-36-48.jpg](https://pic.leetcode-cn.com/1644732767-tthNvN-Xnip2022-02-13_13-36-48.jpg)

&nbsp;
&nbsp;
&nbsp;

## 尝试

- 那么很明显需要为Orders表中的"product_id"列建立索引才行，又因为我这里使用的MySQL5.7.10，所以存在隐式排序，所以还需要添加一行"ORDER BY NULL"
- 但在表t2中，我们同时使用了t2.product_id和t2.order_date两个列来和临时表进行匹配
- 所以为了不让t2回表(Using where)，我们应该为这两个列创建联合索引(也叫组合索引)，只要保证product_id是第一个字段，那么该联合索引同样可以用到子查询中
- 最后t1表该怎么优化呢？因为排序字段中有t1.product_name，那么我们在product_name上建立索引？
- 并不，在该字段上建立索引后，也不过是将ALL变为了Index而已，提升微乎其微，更别说对于varchar字段建立索引还需要根据文本区分度决定具体的索引长度

# 结果

- 此时再查看执行计划，t2和子查询都分别由ALL变为了ref和range，查询开销降为了8.48!
  ![Xnip2022-02-13_13-59-58.jpg](https://pic.leetcode-cn.com/1644732817-nUJYoZ-Xnip2022-02-13_13-59-58.jpg)
  ![Xnip2022-02-13_13-55-47.jpg](https://pic.leetcode-cn.com/1644732822-taHFEh-Xnip2022-02-13_13-55-47.jpg)

// MySQL菜鸟一枚，如有错误或者更好的方案，欢迎各位大佬指教
